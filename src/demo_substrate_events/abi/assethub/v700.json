[
  {
    "name": "System",
    "prefix": "System",
    "storage": [
      {
        "name": "Account",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "frame_system:AccountInfo",
            "keys_id": 0,
            "value_id": 3
          }
        },
        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "docs": [
          " The full account information for a particular account ID."
        ]
      },
      {
        "name": "ExtrinsicCount",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00",
        "docs": [
          " Total extrinsics count for the current block."
        ]
      },
      {
        "name": "BlockWeight",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "frame_support:weights:PerDispatchClass@7",
          "PlainTypeValue": 7
        },
        "fallback": "0x000000000000000000000000000000000000000000000000",
        "docs": [
          " The current weight for the block."
        ]
      },
      {
        "name": "AllExtrinsicsLen",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00",
        "docs": [
          " Total length (in bytes) for all extrinsics put together, for the current block."
        ]
      },
      {
        "name": "BlockHash",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "H256",
            "keys_id": 4,
            "value_id": 9
          }
        },
        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "docs": [
          " Map of block numbers to block hashes."
        ]
      },
      {
        "name": "ExtrinsicData",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "Vec<U8>",
            "keys_id": 4,
            "value_id": 10
          }
        },
        "fallback": "0x00",
        "docs": [
          " Extrinsics data for the current block (maps an extrinsic's index to its data)."
        ]
      },
      {
        "name": "Number",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " The current block number being processed. Set by `execute_block`."
        ]
      },
      {
        "name": "ParentHash",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "H256",
          "PlainTypeValue": 9
        },
        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "docs": [
          " Hash of the previous block."
        ]
      },
      {
        "name": "Digest",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<sp_runtime:generic:digest:DigestItem>",
          "PlainTypeValue": 11
        },
        "fallback": "0x00",
        "docs": [
          " Digest of the current block, also part of the block header."
        ]
      },
      {
        "name": "Events",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<frame_system:EventRecord>",
          "PlainTypeValue": 15
        },
        "fallback": "0x00",
        "docs": [
          " Events deposited for the current block.",
          "",
          " NOTE: This storage item is explicitly unbounded since it is never intended to be read",
          " from within the runtime."
        ]
      },
      {
        "name": "EventCount",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " The number of events in the `Events<T>` list."
        ]
      },
      {
        "name": "EventTopics",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "H256"
            ],
            "value": "Vec<Tuple:U32U32>",
            "keys_id": 9,
            "value_id": 95
          }
        },
        "fallback": "0x00",
        "docs": [
          " Mapping between a topic (represented by T::Hash) and a vector of indexes",
          " of events in the `<Events<T>>` list.",
          "",
          " All topic vectors have deterministic storage locations depending on the topic. This",
          " allows light-clients to leverage the changes trie storage tracking mechanism and",
          " in case of changes fetch the list of events of interest.",
          "",
          " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
          " the `EventIndex` then in case if the topic has the same contents on the next block",
          " no notification will be triggered thus the event might be lost."
        ]
      },
      {
        "name": "LastRuntimeUpgrade",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "frame_system:LastRuntimeUpgradeInfo",
          "PlainTypeValue": 97
        },
        "fallback": "0x00",
        "docs": [
          " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
        ]
      },
      {
        "name": "UpgradedToU32RefCount",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 86
        },
        "fallback": "0x00",
        "docs": [
          " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
        ]
      },
      {
        "name": "UpgradedToTripleRefCount",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 86
        },
        "fallback": "0x00",
        "docs": [
          " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
          " (default) if not."
        ]
      },
      {
        "name": "ExecutionPhase",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "frame_system:Phase",
          "PlainTypeValue": 93
        },
        "fallback": "0x00",
        "docs": [
          " The execution phase of the block."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "0000",
        "name": "fill_block",
        "docs": [
          "A dispatch that will fill the block weight up to the given ratio."
        ],
        "args": [
          {
            "name": "ratio",
            "type": "U32",
            "type_name": "Perbill"
          }
        ]
      },
      {
        "lookup": "0001",
        "name": "remark",
        "docs": [
          "Make some on-chain remark.",
          "",
          "# <weight>",
          "- `O(1)`",
          "# </weight>"
        ],
        "args": [
          {
            "name": "remark",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      },
      {
        "lookup": "0002",
        "name": "set_heap_pages",
        "docs": [
          "Set the number of pages in the WebAssembly environment's heap."
        ],
        "args": [
          {
            "name": "pages",
            "type": "U64",
            "type_name": "u64"
          }
        ]
      },
      {
        "lookup": "0003",
        "name": "set_code",
        "docs": [
          "Set the new runtime code.",
          "",
          "# <weight>",
          "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`",
          "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is",
          "  expensive).",
          "- 1 storage write (codec `O(C)`).",
          "- 1 digest item.",
          "- 1 event.",
          "The weight of this function is dependent on the runtime, but generally this is very",
          "expensive. We will treat this as a full block.",
          "# </weight>"
        ],
        "args": [
          {
            "name": "code",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      },
      {
        "lookup": "0004",
        "name": "set_code_without_checks",
        "docs": [
          "Set the new runtime code without doing any checks of the given `code`.",
          "",
          "# <weight>",
          "- `O(C)` where `C` length of `code`",
          "- 1 storage write (codec `O(C)`).",
          "- 1 digest item.",
          "- 1 event.",
          "The weight of this function is dependent on the runtime. We will treat this as a full",
          "block. # </weight>"
        ],
        "args": [
          {
            "name": "code",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      },
      {
        "lookup": "0005",
        "name": "set_storage",
        "docs": [
          "Set some items of storage."
        ],
        "args": [
          {
            "name": "items",
            "type": "Vec<Tuple:Vec<U8>Vec<U8>>",
            "type_name": "Vec<KeyValue>"
          }
        ]
      },
      {
        "lookup": "0006",
        "name": "kill_storage",
        "docs": [
          "Kill some items from storage."
        ],
        "args": [
          {
            "name": "keys",
            "type": "Vec<Vec<U8>>",
            "type_name": "Vec<Key>"
          }
        ]
      },
      {
        "lookup": "0007",
        "name": "kill_prefix",
        "docs": [
          "Kill all storage items with a key that starts with the given prefix.",
          "",
          "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
          "the prefix we are removing to accurately calculate the weight of this function."
        ],
        "args": [
          {
            "name": "prefix",
            "type": "Vec<U8>",
            "type_name": "Key"
          },
          {
            "name": "subkeys",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "0008",
        "name": "remark_with_event",
        "docs": [
          "Make some on-chain remark and emit event."
        ],
        "args": [
          {
            "name": "remark",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 99
    },
    "events": [
      {
        "lookup": "0000",
        "name": "ExtrinsicSuccess",
        "docs": [
          "An extrinsic completed successfully."
        ],
        "args": [
          "frame_support:weights:DispatchInfo"
        ],
        "args_name": [
          "dispatch_info"
        ],
        "args_type_name": [
          "DispatchInfo"
        ]
      },
      {
        "lookup": "0001",
        "name": "ExtrinsicFailed",
        "docs": [
          "An extrinsic failed."
        ],
        "args": [
          "sp_runtime:DispatchError",
          "frame_support:weights:DispatchInfo"
        ],
        "args_name": [
          "dispatch_error",
          "dispatch_info"
        ],
        "args_type_name": [
          "DispatchError",
          "DispatchInfo"
        ]
      },
      {
        "lookup": "0002",
        "name": "CodeUpdated",
        "docs": [
          "`:code` was updated."
        ],
        "args": null
      },
      {
        "lookup": "0003",
        "name": "NewAccount",
        "docs": [
          "A new account was created."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "account"
        ],
        "args_type_name": [
          "AccountId"
        ]
      },
      {
        "lookup": "0004",
        "name": "KilledAccount",
        "docs": [
          "An account was reaped."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "account"
        ],
        "args_type_name": [
          "AccountId"
        ]
      },
      {
        "lookup": "0005",
        "name": "Remarked",
        "docs": [
          "On on-chain remark happened."
        ],
        "args": [
          "AccountId",
          "H256"
        ],
        "args_name": [
          "sender",
          "hash"
        ],
        "args_type_name": [
          "AccountId",
          "Hash"
        ]
      }
    ],
    "events_value": {
      "type": 18
    },
    "constants": [
      {
        "name": "BlockWeights",
        "type": "frame_system:limits:BlockWeights",
        "type_value": 104,
        "constants_value": "00f2052a010000000088526a74000000405973070000000001c0d22c76510000000100e6bd4f57000000010000000000000000405973070000000001c074c1906e000000010088526a740000000100a2941a1d0000004059730700000000000000",
        "docs": [
          " Block & extrinsics weights: base values and limits."
        ]
      },
      {
        "name": "BlockLength",
        "type": "frame_support:weights:PerDispatchClass@109",
        "type_value": 108,
        "constants_value": "00003c000000500000005000",
        "docs": [
          " The maximum length of a block (in bytes)."
        ]
      },
      {
        "name": "BlockHashCount",
        "type": "U32",
        "type_value": 4,
        "constants_value": "60090000",
        "docs": [
          " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
        ]
      },
      {
        "name": "DbWeight",
        "type": "frame_support:weights:RuntimeDbWeight",
        "type_value": 110,
        "constants_value": "40787d010000000000e1f50500000000",
        "docs": [
          " The weight of runtime database operations the runtime can invoke."
        ]
      },
      {
        "name": "Version",
        "type": "sp_version:RuntimeVersion",
        "type_value": 111,
        "constants_value": "2473746174656d696e742473746174656d696e7401000000bc0200000000000028dd718d5cc53262d401000000df6acb689907609b0400000037e397fc7c91f5e40100000040fe3ad401f8959a05000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000bc9d89904f5b923f0100000037c8bb1350a9a2a801000000ea93e3f16f3d6962020000000500000000",
        "docs": [
          " Get the chain's current version."
        ]
      },
      {
        "name": "SS58Prefix",
        "type": "U16",
        "type_value": 84,
        "constants_value": "0000",
        "docs": [
          " The designated SS85 prefix of this chain.",
          "",
          " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
          " that the runtime should know about the prefix in order to make use of it as",
          " an identifier of the chain."
        ]
      }
    ],
    "errors": [
      {
        "name": "InvalidSpecName",
        "doc": [
          "The name of specification does not match between the current runtime",
          "and the new runtime."
        ]
      },
      {
        "name": "SpecVersionNeedsToIncrease",
        "doc": [
          "The specification version is not allowed to decrease between the current runtime",
          "and the new runtime."
        ]
      },
      {
        "name": "FailedToExtractRuntimeVersion",
        "doc": [
          "Failed to extract the runtime version from the new runtime.",
          "",
          "Either calling `Core_version` or decoding `RuntimeVersion` failed."
        ]
      },
      {
        "name": "NonDefaultComposite",
        "doc": [
          "Suicide called when the account has non-default composite data."
        ]
      },
      {
        "name": "NonZeroRefCount",
        "doc": [
          "There is a non-zero reference count preventing the account from being purged."
        ]
      },
      {
        "name": "CallFiltered",
        "doc": [
          "The origin filter prevent the call to be dispatched."
        ]
      }
    ],
    "errors_value": {
      "type": 115
    },
    "index": 0
  },
  {
    "name": "ParachainSystem",
    "prefix": "ParachainSystem",
    "storage": [
      {
        "name": "PendingValidationCode",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<U8>",
          "PlainTypeValue": 10
        },
        "fallback": "0x00",
        "docs": [
          " In case of a scheduled upgrade, this storage field contains the validation code to be applied.",
          "",
          " As soon as the relay chain gives us the go-ahead signal, we will overwrite the [`:code`][well_known_keys::CODE]",
          " which will result the next block process with the new validation code. This concludes the upgrade process.",
          "",
          " [well_known_keys::CODE]: sp_core::storage::well_known_keys::CODE"
        ]
      },
      {
        "name": "NewValidationCode",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<U8>",
          "PlainTypeValue": 10
        },
        "fallback": "0x00",
        "docs": [
          " Validation code that is set by the parachain and is to be communicated to collator and",
          " consequently the relay-chain.",
          "",
          " This will be cleared in `on_initialize` of each new block if no other pallet already set",
          " the value."
        ]
      },
      {
        "name": "ValidationData",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "polkadot_primitives:v1:PersistedValidationData",
          "PlainTypeValue": 116
        },
        "fallback": "0x00",
        "docs": [
          " The [`PersistedValidationData`] set for this block.",
          " This value is expected to be set only once per block and it's never stored",
          " in the trie."
        ]
      },
      {
        "name": "DidSetValidationCode",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 86
        },
        "fallback": "0x00",
        "docs": [
          " Were the validation data set to notify the relay chain?"
        ]
      },
      {
        "name": "UpgradeRestrictionSignal",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "option<polkadot_primitives:v1:UpgradeRestriction>",
          "PlainTypeValue": 118
        },
        "fallback": "0x00",
        "docs": [
          " An option which indicates if the relay-chain restricts signalling a validation code upgrade.",
          " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced",
          " candidate will be invalid.",
          "",
          " This storage item is a mirror of the corresponding value for the current parachain from the",
          " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
          " set after the inherent."
        ]
      },
      {
        "name": "RelevantMessagingState",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "cumulus_pallet_parachain_system:relay_state_snapshot:MessagingStateSnapshot",
          "PlainTypeValue": 120
        },
        "fallback": "0x00",
        "docs": [
          " The snapshot of some state related to messaging relevant to the current parachain as per",
          " the relay parent.",
          "",
          " This field is meant to be updated each block with the validation data inherent. Therefore,",
          " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
          "",
          " This data is also absent from the genesis."
        ]
      },
      {
        "name": "HostConfiguration",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "polkadot_primitives:v1:AbridgedHostConfiguration",
          "PlainTypeValue": 124
        },
        "fallback": "0x00",
        "docs": [
          " The parachain host configuration that was obtained from the relay parent.",
          "",
          " This field is meant to be updated each block with the validation data inherent. Therefore,",
          " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
          "",
          " This data is also absent from the genesis."
        ]
      },
      {
        "name": "LastDmqMqcHead",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "H256",
          "PlainTypeValue": 125
        },
        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "docs": [
          " The last downward message queue chain head we have observed.",
          "",
          " This value is loaded before and saved after processing inbound downward messages carried",
          " by the system inherent."
        ]
      },
      {
        "name": "LastHrmpMqcHeads",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Tuple:U32H256>",
          "PlainTypeValue": 126
        },
        "fallback": "0x00",
        "docs": [
          " The message queue chain heads we have observed per each channel incoming channel.",
          "",
          " This value is loaded before and saved after processing inbound downward messages carried",
          " by the system inherent."
        ]
      },
      {
        "name": "ProcessedDownwardMessages",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " Number of downward messages processed in a block.",
          "",
          " This will be cleared in `on_initialize` of each new block."
        ]
      },
      {
        "name": "HrmpWatermark",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " HRMP watermark that was set in a block.",
          "",
          " This will be cleared in `on_initialize` of each new block."
        ]
      },
      {
        "name": "HrmpOutboundMessages",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<polkadot_core_primitives:OutboundHrmpMessage>",
          "PlainTypeValue": 129
        },
        "fallback": "0x00",
        "docs": [
          " HRMP messages that were sent in a block.",
          "",
          " This will be cleared in `on_initialize` of each new block."
        ]
      },
      {
        "name": "UpwardMessages",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Vec<U8>>",
          "PlainTypeValue": 103
        },
        "fallback": "0x00",
        "docs": [
          " Upward messages that were sent in a block.",
          "",
          " This will be cleared in `on_initialize` of each new block."
        ]
      },
      {
        "name": "PendingUpwardMessages",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Vec<U8>>",
          "PlainTypeValue": 103
        },
        "fallback": "0x00",
        "docs": [
          " Upward messages that are still pending and not yet send to the relay chain."
        ]
      },
      {
        "name": "AnnouncedHrmpMessagesPerCandidate",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " The number of HRMP messages we observed in `on_initialize` and thus used that number for",
          " announcing the weight of `on_initialize` and `on_finalize`."
        ]
      },
      {
        "name": "ReservedXcmpWeightOverride",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "U64",
          "PlainTypeValue": 8
        },
        "fallback": "0x00",
        "docs": [
          " The weight we reserve at the beginning of the block for processing XCMP messages. This",
          " overrides the amount set in the Config trait."
        ]
      },
      {
        "name": "ReservedDmpWeightOverride",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "U64",
          "PlainTypeValue": 8
        },
        "fallback": "0x00",
        "docs": [
          " The weight we reserve at the beginning of the block for processing DMP messages. This",
          " overrides the amount set in the Config trait."
        ]
      },
      {
        "name": "AuthorizedUpgrade",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "H256",
          "PlainTypeValue": 9
        },
        "fallback": "0x00",
        "docs": [
          " The next authorized upgrade, if there is one."
        ]
      },
      {
        "name": "CustomValidationHeadData",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<U8>",
          "PlainTypeValue": 10
        },
        "fallback": "0x00",
        "docs": [
          " A custom head data that should be returned as result of `validate_block`.",
          "",
          " See [`Pallet::set_custom_validation_head_data`] for more information."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "0100",
        "name": "set_validation_data",
        "docs": [
          "Set the current validation data.",
          "",
          "This should be invoked exactly once per block. It will panic at the finalization",
          "phase if the call was not invoked.",
          "",
          "The dispatch origin for this call must be `Inherent`",
          "",
          "As a side effect, this function upgrades the current validation function",
          "if the appropriate time has come."
        ],
        "args": [
          {
            "name": "data",
            "type": "cumulus_primitives_parachain_inherent:ParachainInherentData",
            "type_name": "ParachainInherentData"
          }
        ]
      },
      {
        "lookup": "0101",
        "name": "sudo_send_upward_message",
        "docs": null,
        "args": [
          {
            "name": "message",
            "type": "Vec<U8>",
            "type_name": "UpwardMessage"
          }
        ]
      },
      {
        "lookup": "0102",
        "name": "authorize_upgrade",
        "docs": null,
        "args": [
          {
            "name": "code_hash",
            "type": "H256",
            "type_name": "Hash"
          }
        ]
      },
      {
        "lookup": "0103",
        "name": "enact_authorized_upgrade",
        "docs": null,
        "args": [
          {
            "name": "code",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 131
    },
    "events": [
      {
        "lookup": "0100",
        "name": "ValidationFunctionStored",
        "docs": [
          "The validation function has been scheduled to apply."
        ],
        "args": null
      },
      {
        "lookup": "0101",
        "name": "ValidationFunctionApplied",
        "docs": [
          "The validation function was applied as of the contained relay chain block number."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "RelayChainBlockNumber"
        ]
      },
      {
        "lookup": "0102",
        "name": "ValidationFunctionDiscarded",
        "docs": [
          "The relay-chain aborted the upgrade process."
        ],
        "args": null
      },
      {
        "lookup": "0103",
        "name": "UpgradeAuthorized",
        "docs": [
          "An upgrade has been authorized."
        ],
        "args": [
          "H256"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "Hash"
        ]
      },
      {
        "lookup": "0104",
        "name": "DownwardMessagesReceived",
        "docs": [
          "Some downward messages have been received and will be processed.",
          "\\[ count \\]"
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "u32"
        ]
      },
      {
        "lookup": "0105",
        "name": "DownwardMessagesProcessed",
        "docs": [
          "Downward messages were processed using the given weight.",
          "\\[ weight_used, result_mqc_head \\]"
        ],
        "args": [
          "U64",
          "H256"
        ],
        "args_name": [
          "",
          ""
        ],
        "args_type_name": [
          "Weight",
          "relay_chain::Hash"
        ]
      }
    ],
    "events_value": {
      "type": 26
    },
    "errors": [
      {
        "name": "OverlappingUpgrades",
        "doc": [
          "Attempt to upgrade validation function while existing upgrade pending"
        ]
      },
      {
        "name": "ProhibitedByPolkadot",
        "doc": [
          "Polkadot currently prohibits this parachain from upgrading its validation function"
        ]
      },
      {
        "name": "TooBig",
        "doc": [
          "The supplied validation function has compiled into a blob larger than Polkadot is",
          "willing to run"
        ]
      },
      {
        "name": "ValidationDataNotAvailable",
        "doc": [
          "The inherent which supplies the validation data did not run this block"
        ]
      },
      {
        "name": "HostConfigurationNotAvailable",
        "doc": [
          "The inherent which supplies the host configuration did not run this block"
        ]
      },
      {
        "name": "NotScheduled",
        "doc": [
          "No validation function upgrade is currently scheduled."
        ]
      },
      {
        "name": "NothingAuthorized",
        "doc": [
          "No code upgrade has been authorized."
        ]
      },
      {
        "name": "Unauthorized",
        "doc": [
          "The given code upgrade has not been authorized."
        ]
      }
    ],
    "errors_value": {
      "type": 141
    },
    "index": 1
  },
  {
    "name": "Timestamp",
    "prefix": "Timestamp",
    "storage": [
      {
        "name": "Now",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U64",
          "PlainTypeValue": 8
        },
        "fallback": "0x0000000000000000",
        "docs": [
          " Current time for the current block."
        ]
      },
      {
        "name": "DidUpdate",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 86
        },
        "fallback": "0x00",
        "docs": [
          " Did the timestamp get updated in this block?"
        ]
      }
    ],
    "calls": [
      {
        "lookup": "0300",
        "name": "set",
        "docs": [
          "Set the current time.",
          "",
          "This call should be invoked exactly once per block. It will panic at the finalization",
          "phase, if this call hasn't been invoked by that time.",
          "",
          "The timestamp should be greater than the previous one by the amount specified by",
          "`MinimumPeriod`.",
          "",
          "The dispatch origin for this call must be `Inherent`.",
          "",
          "# <weight>",
          "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
          "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
          "  `on_finalize`)",
          "- 1 event handler `on_timestamp_set`. Must be `O(1)`.",
          "# </weight>"
        ],
        "args": [
          {
            "name": "now",
            "type": "compact<U64>",
            "type_name": "Moment"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 142
    },
    "constants": [
      {
        "name": "MinimumPeriod",
        "type": "U64",
        "type_value": 8,
        "constants_value": "7017000000000000",
        "docs": [
          " The minimum period between blocks. Beware that this is different to the *expected*",
          " period that the block production apparatus provides. Your chosen consensus system will",
          " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
          " double this period on default settings."
        ]
      }
    ],
    "errors": null,
    "errors_value": null,
    "index": 3
  },
  {
    "name": "ParachainInfo",
    "prefix": "ParachainInfo",
    "storage": [
      {
        "name": "ParachainId",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 35
        },
        "fallback": "0x64000000",
        "docs": null
      }
    ],
    "errors": null,
    "errors_value": null,
    "index": 4
  },
  {
    "name": "Balances",
    "prefix": "Balances",
    "storage": [
      {
        "name": "TotalIssuance",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U128",
          "PlainTypeValue": 6
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " The total units issued in the system."
        ]
      },
      {
        "name": "Account",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "pallet_balances:AccountData",
            "keys_id": 0,
            "value_id": 5
          }
        },
        "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "docs": [
          " The Balances pallet example of storing the balance of an account.",
          "",
          " # Example",
          "",
          " ```nocompile",
          "  impl pallet_balances::Config for Runtime {",
          "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
          "  }",
          " ```",
          "",
          " You can also store the balance of an account in the `System` pallet.",
          "",
          " # Example",
          "",
          " ```nocompile",
          "  impl pallet_balances::Config for Runtime {",
          "   type AccountStore = System",
          "  }",
          " ```",
          "",
          " But this comes with tradeoffs, storing account balances in the system pallet stores",
          " `frame_system` data alongside the account data contrary to storing account balances in the",
          " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
          " NOTE: This is only used in the case that this pallet is used to store balances."
        ]
      },
      {
        "name": "Locks",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Vec<pallet_balances:BalanceLock>",
            "keys_id": 0,
            "value_id": 143
          }
        },
        "fallback": "0x00",
        "docs": [
          " Any liquidity locks on some account balances.",
          " NOTE: Should only be accessed when setting, changing and freeing a lock."
        ]
      },
      {
        "name": "Reserves",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Vec<pallet_balances:ReserveData>",
            "keys_id": 0,
            "value_id": 147
          }
        },
        "fallback": "0x00",
        "docs": [
          " Named reserves on some account balances."
        ]
      },
      {
        "name": "StorageVersion",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "pallet_balances:Releases",
          "PlainTypeValue": 150
        },
        "fallback": "0x00",
        "docs": [
          " Storage version of the pallet.",
          "",
          " This is set to v2.0.0 for new networks."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "0a00",
        "name": "transfer",
        "docs": [
          "Transfer some liquid free balance to another account.",
          "",
          "`transfer` will set the `FreeBalance` of the sender and receiver.",
          "If the sender's account is below the existential deposit as a result",
          "of the transfer, the account will be reaped.",
          "",
          "The dispatch origin for this call must be `Signed` by the transactor.",
          "",
          "# <weight>",
          "- Dependent on arguments but not critical, given proper implementations for input config",
          "  types. See related functions below.",
          "- It contains a limited number of reads and writes internally and no complex",
          "  computation.",
          "",
          "Related functions:",
          "",
          "  - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
          "  - Transferring balances to accounts that did not exist before will cause",
          "    `T::OnNewAccount::on_new_account` to be called.",
          "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
          "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check",
          "    that the transfer will not kill the origin account.",
          "---------------------------------",
          "- Origin account is already in memory, so no DB operations for them.",
          "# </weight>"
        ],
        "args": [
          {
            "name": "dest",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          },
          {
            "name": "value",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "0a01",
        "name": "set_balance",
        "docs": [
          "Set the balances of a given account.",
          "",
          "This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
          "also alter the total issuance of the system (`TotalIssuance`) appropriately.",
          "If the new free or reserved balance is below the existential deposit,",
          "it will reset the account nonce (`frame_system::AccountNonce`).",
          "",
          "The dispatch origin for this call is `root`."
        ],
        "args": [
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          },
          {
            "name": "new_free",
            "type": "compact<U128>",
            "type_name": "Balance"
          },
          {
            "name": "new_reserved",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "0a02",
        "name": "force_transfer",
        "docs": [
          "Exactly as `transfer`, except the origin must be root and the source account may be",
          "specified.",
          "# <weight>",
          "- Same as transfer, but additional read and write because the source account is not",
          "  assumed to be in the overlay.",
          "# </weight>"
        ],
        "args": [
          {
            "name": "source",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          },
          {
            "name": "dest",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          },
          {
            "name": "value",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "0a03",
        "name": "transfer_keep_alive",
        "docs": [
          "Same as the [`transfer`] call, but with a check that the transfer will not kill the",
          "origin account.",
          "",
          "99% of the time you want [`transfer`] instead.",
          "",
          "[`transfer`]: struct.Pallet.html#method.transfer"
        ],
        "args": [
          {
            "name": "dest",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          },
          {
            "name": "value",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "0a04",
        "name": "transfer_all",
        "docs": [
          "Transfer the entire transferable balance from the caller account.",
          "",
          "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
          "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
          "transferred by this function. To ensure that this function results in a killed account,",
          "you might need to prepare the account by removing any reference counters, storage",
          "deposits, etc...",
          "",
          "The dispatch origin of this call must be Signed.",
          "",
          "- `dest`: The recipient of the transfer.",
          "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
          "  of the funds the account has, causing the sender account to be killed (false), or",
          "  transfer everything except at least the existential deposit, which will guarantee to",
          "  keep the sender account alive (true). # <weight>",
          "- O(1). Just like transfer, but reading the user's transferable balance first.",
          "  #</weight>"
        ],
        "args": [
          {
            "name": "dest",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          },
          {
            "name": "keep_alive",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "0a05",
        "name": "force_unreserve",
        "docs": [
          "Unreserve some balance from a user by force.",
          "",
          "Can only be called by ROOT."
        ],
        "args": [
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 151
    },
    "events": [
      {
        "lookup": "0a00",
        "name": "Endowed",
        "docs": [
          "An account was created with some free balance."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "account",
          "free_balance"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a01",
        "name": "DustLost",
        "docs": [
          "An account was removed whose balance was non-zero but below ExistentialDeposit,",
          "resulting in an outright loss."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "account",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a02",
        "name": "Transfer",
        "docs": [
          "Transfer succeeded."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "from",
          "to",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a03",
        "name": "BalanceSet",
        "docs": [
          "A balance was set by root."
        ],
        "args": [
          "AccountId",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "free",
          "reserved"
        ],
        "args_type_name": [
          "AccountId",
          "Balance",
          "Balance"
        ]
      },
      {
        "lookup": "0a04",
        "name": "Reserved",
        "docs": [
          "Some balance was reserved (moved from free to reserved)."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a05",
        "name": "Unreserved",
        "docs": [
          "Some balance was unreserved (moved from reserved to free)."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a06",
        "name": "ReserveRepatriated",
        "docs": [
          "Some balance was moved from the reserve of the first account to the second account.",
          "Final argument indicates the destination balance type."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "U128",
          "frame_support:traits:tokens:misc:BalanceStatus"
        ],
        "args_name": [
          "from",
          "to",
          "amount",
          "destination_status"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "Balance",
          "Status"
        ]
      },
      {
        "lookup": "0a07",
        "name": "Deposit",
        "docs": [
          "Some amount was deposited (e.g. for transaction fees)."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a08",
        "name": "Withdraw",
        "docs": [
          "Some amount was withdrawn from the account (e.g. for transaction fees)."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a09",
        "name": "Slashed",
        "docs": [
          "Some amount was removed from the account (e.g. for misbehavior)."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      }
    ],
    "events_value": {
      "type": 27
    },
    "constants": [
      {
        "name": "ExistentialDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00ca9a3b000000000000000000000000",
        "docs": [
          " The minimum amount required to keep an account open."
        ]
      },
      {
        "name": "MaxLocks",
        "type": "U32",
        "type_value": 4,
        "constants_value": "32000000",
        "docs": [
          " The maximum number of locks that should exist on an account.",
          " Not strictly enforced, but used for weight estimation."
        ]
      },
      {
        "name": "MaxReserves",
        "type": "U32",
        "type_value": 4,
        "constants_value": "32000000",
        "docs": [
          " The maximum number of named reserves that can exist on an account."
        ]
      }
    ],
    "errors": [
      {
        "name": "VestingBalance",
        "doc": [
          "Vesting balance too high to send value"
        ]
      },
      {
        "name": "LiquidityRestrictions",
        "doc": [
          "Account liquidity restrictions prevent withdrawal"
        ]
      },
      {
        "name": "InsufficientBalance",
        "doc": [
          "Balance too low to send value"
        ]
      },
      {
        "name": "ExistentialDeposit",
        "doc": [
          "Value too low to create account due to existential deposit"
        ]
      },
      {
        "name": "KeepAlive",
        "doc": [
          "Transfer/payment would kill account"
        ]
      },
      {
        "name": "ExistingVestingSchedule",
        "doc": [
          "A vesting schedule already exists for this account"
        ]
      },
      {
        "name": "DeadAccount",
        "doc": [
          "Beneficiary account must pre-exist"
        ]
      },
      {
        "name": "TooManyReserves",
        "doc": [
          "Number of named reserves exceed MaxReserves"
        ]
      }
    ],
    "errors_value": {
      "type": 154
    },
    "index": 10
  },
  {
    "name": "TransactionPayment",
    "prefix": "TransactionPayment",
    "storage": [
      {
        "name": "NextFeeMultiplier",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U128",
          "PlainTypeValue": 155
        },
        "fallback": "0x000064a7b3b6e00d0000000000000000",
        "docs": null
      },
      {
        "name": "StorageVersion",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "pallet_transaction_payment:Releases",
          "PlainTypeValue": 156
        },
        "fallback": "0x00",
        "docs": null
      }
    ],
    "constants": [
      {
        "name": "TransactionByteFee",
        "type": "U128",
        "type_value": 6,
        "constants_value": "a0860100000000000000000000000000",
        "docs": [
          " The fee to be paid for making a transaction; the per-byte portion."
        ]
      },
      {
        "name": "OperationalFeeMultiplier",
        "type": "U8",
        "type_value": 2,
        "constants_value": "05",
        "docs": [
          " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
          " `priority`",
          "",
          " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
          " added to a tip component in regular `priority` calculations.",
          " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
          " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
          "",
          " ```rust,ignore",
          " // For `Normal`",
          " let priority = priority_calc(tip);",
          "",
          " // For `Operational`",
          " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
          " let priority = priority_calc(tip + virtual_tip);",
          " ```",
          "",
          " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
          " sent with the transaction. So, not only does the transaction get a priority bump based",
          " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
          " transactions."
        ]
      },
      {
        "name": "WeightToFee",
        "type": "Vec<frame_support:weights:WeightToFeeCoefficient>",
        "type_value": 157,
        "constants_value": "0400000000000000000000000000000000ff117a000001",
        "docs": [
          " The polynomial that is applied in order to derive fee from weight."
        ]
      }
    ],
    "errors": null,
    "errors_value": null,
    "index": 11
  },
  {
    "name": "AssetTxPayment",
    "prefix": "",
    "storage": null,
    "errors": null,
    "errors_value": null,
    "index": 12
  },
  {
    "name": "Authorship",
    "prefix": "Authorship",
    "storage": [
      {
        "name": "Uncles",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<pallet_authorship:UncleEntryItem>",
          "PlainTypeValue": 159
        },
        "fallback": "0x00",
        "docs": [
          " Uncles"
        ]
      },
      {
        "name": "Author",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "AccountId",
          "PlainTypeValue": 0
        },
        "fallback": "0x00",
        "docs": [
          " Author of current block."
        ]
      },
      {
        "name": "DidSetUncles",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 86
        },
        "fallback": "0x00",
        "docs": [
          " Whether uncles were already set in this block."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "1400",
        "name": "set_uncles",
        "docs": [
          "Provide a set of uncles."
        ],
        "args": [
          {
            "name": "new_uncles",
            "type": "Vec<sp_runtime:generic:header:Header>",
            "type_name": "Vec<Header>"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 162
    },
    "constants": [
      {
        "name": "UncleGenerations",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00000000",
        "docs": [
          " The number of blocks back we should accept uncles.",
          " This means that we will deal with uncle-parents that are",
          " `UncleGenerations + 1` before `now`."
        ]
      }
    ],
    "errors": [
      {
        "name": "InvalidUncleParent",
        "doc": [
          "The uncle parent not in the chain."
        ]
      },
      {
        "name": "UnclesAlreadySet",
        "doc": [
          "Uncles already set in the block."
        ]
      },
      {
        "name": "TooManyUncles",
        "doc": [
          "Too many uncles."
        ]
      },
      {
        "name": "GenesisUncle",
        "doc": [
          "The uncle is genesis."
        ]
      },
      {
        "name": "TooHighUncle",
        "doc": [
          "The uncle is too high in chain."
        ]
      },
      {
        "name": "UncleAlreadyIncluded",
        "doc": [
          "The uncle is already included."
        ]
      },
      {
        "name": "OldUncle",
        "doc": [
          "The uncle isn't recent enough to be included."
        ]
      }
    ],
    "errors_value": {
      "type": 166
    },
    "index": 20
  },
  {
    "name": "CollatorSelection",
    "prefix": "CollatorSelection",
    "storage": [
      {
        "name": "Invulnerables",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<AccountId>",
          "PlainTypeValue": 30
        },
        "fallback": "0x00",
        "docs": [
          " The invulnerable, fixed collators."
        ]
      },
      {
        "name": "Candidates",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<pallet_collator_selection:pallet:CandidateInfo>",
          "PlainTypeValue": 167
        },
        "fallback": "0x00",
        "docs": [
          " The (community, limited) collation candidates."
        ]
      },
      {
        "name": "LastAuthoredBlock",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "U32",
            "keys_id": 0,
            "value_id": 4
          }
        },
        "fallback": "0x00000000",
        "docs": [
          " Last block authored by collator."
        ]
      },
      {
        "name": "DesiredCandidates",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " Desired number of candidates.",
          "",
          " This should ideally always be less than [`Config::MaxCandidates`] for weights to be correct."
        ]
      },
      {
        "name": "CandidacyBond",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U128",
          "PlainTypeValue": 6
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " Fixed amount to deposit to become a collator.",
          "",
          " When a collator calls `leave_intent` they immediately receive the deposit back."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "1500",
        "name": "set_invulnerables",
        "docs": [
          "Set the list of invulnerable (fixed) collators."
        ],
        "args": [
          {
            "name": "new",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          }
        ]
      },
      {
        "lookup": "1501",
        "name": "set_desired_candidates",
        "docs": [
          "Set the ideal number of collators (not including the invulnerables).",
          "If lowering this number, then the number of running collators could be higher than this figure.",
          "Aside from that edge case, there should be no other way to have more collators than the desired number."
        ],
        "args": [
          {
            "name": "max",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "1502",
        "name": "set_candidacy_bond",
        "docs": [
          "Set the candidacy bond amount."
        ],
        "args": [
          {
            "name": "bond",
            "type": "U128",
            "type_name": "BalanceOf"
          }
        ]
      },
      {
        "lookup": "1503",
        "name": "register_as_candidate",
        "docs": [
          "Register this account as a collator candidate. The account must (a) already have",
          "registered session keys and (b) be able to reserve the `CandidacyBond`.",
          "",
          "This call is not available to `Invulnerable` collators."
        ],
        "args": null
      },
      {
        "lookup": "1504",
        "name": "leave_intent",
        "docs": [
          "Deregister `origin` as a collator candidate. Note that the collator can only leave on",
          "session change. The `CandidacyBond` will be unreserved immediately.",
          "",
          "This call will fail if the total number of candidates would drop below `MinCandidates`.",
          "",
          "This call is not available to `Invulnerable` collators."
        ],
        "args": null
      }
    ],
    "calls_value": {
      "type": 169
    },
    "events": [
      {
        "lookup": "1500",
        "name": "NewInvulnerables",
        "docs": null,
        "args": [
          "Vec<AccountId>"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "Vec<AccountId>"
        ]
      },
      {
        "lookup": "1501",
        "name": "NewDesiredCandidates",
        "docs": null,
        "args": [
          "U32"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "u32"
        ]
      },
      {
        "lookup": "1502",
        "name": "NewCandidacyBond",
        "docs": null,
        "args": [
          "U128"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "BalanceOf"
        ]
      },
      {
        "lookup": "1503",
        "name": "CandidateAdded",
        "docs": null,
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "",
          ""
        ],
        "args_type_name": [
          "AccountId",
          "BalanceOf"
        ]
      },
      {
        "lookup": "1504",
        "name": "CandidateRemoved",
        "docs": null,
        "args": [
          "AccountId"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "AccountId"
        ]
      }
    ],
    "events_value": {
      "type": 29
    },
    "errors": [
      {
        "name": "TooManyCandidates",
        "doc": [
          "Too many candidates"
        ]
      },
      {
        "name": "TooFewCandidates",
        "doc": [
          "Too few candidates"
        ]
      },
      {
        "name": "Unknown",
        "doc": [
          "Unknown error"
        ]
      },
      {
        "name": "Permission",
        "doc": [
          "Permission issue"
        ]
      },
      {
        "name": "AlreadyCandidate",
        "doc": [
          "User is already a candidate"
        ]
      },
      {
        "name": "NotCandidate",
        "doc": [
          "User is not a candidate"
        ]
      },
      {
        "name": "AlreadyInvulnerable",
        "doc": [
          "User is already an Invulnerable"
        ]
      },
      {
        "name": "NoAssociatedValidatorId",
        "doc": [
          "Account has no associated validator ID"
        ]
      },
      {
        "name": "ValidatorNotRegistered",
        "doc": [
          "Validator ID is not yet registered"
        ]
      }
    ],
    "errors_value": {
      "type": 170
    },
    "index": 21
  },
  {
    "name": "Session",
    "prefix": "Session",
    "storage": [
      {
        "name": "Validators",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<AccountId>",
          "PlainTypeValue": 30
        },
        "fallback": "0x00",
        "docs": [
          " The current set of validators."
        ]
      },
      {
        "name": "CurrentIndex",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " Current index of the session."
        ]
      },
      {
        "name": "QueuedChanged",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 86
        },
        "fallback": "0x00",
        "docs": [
          " True if the underlying economic identities or weighting behind the validators",
          " has changed in the queued validator set."
        ]
      },
      {
        "name": "QueuedKeys",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Tuple:AccountIdstatemint_runtime:SessionKeys>",
          "PlainTypeValue": 171
        },
        "fallback": "0x00",
        "docs": [
          " The queued keys for the next session. When the next session begins, these keys",
          " will be used to determine the validator's session keys."
        ]
      },
      {
        "name": "DisabledValidators",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<U32>",
          "PlainTypeValue": 89
        },
        "fallback": "0x00",
        "docs": [
          " Indices of disabled validators.",
          "",
          " The vec is always kept sorted so that we can find whether a given validator is",
          " disabled using binary search. It gets cleared when `on_session_ending` returns",
          " a new set of identities."
        ]
      },
      {
        "name": "NextKeys",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "[U8; 32]",
            "keys_id": 0,
            "value_id": 173
          }
        },
        "fallback": "0x00",
        "docs": [
          " The next session keys for a validator."
        ]
      },
      {
        "name": "KeyOwner",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "[U8; 4]",
              "Vec<U8>"
            ],
            "value": "AccountId",
            "keys_id": 176,
            "value_id": 0
          }
        },
        "fallback": "0x00",
        "docs": [
          " The owner of a key. The key is the `KeyTypeId` + the encoded key."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "1600",
        "name": "set_keys",
        "docs": [
          "Sets the session key(s) of the function caller to `keys`.",
          "Allows an account to set its session key prior to becoming a validator.",
          "This doesn't take effect until the next session.",
          "",
          "The dispatch origin of this function must be signed.",
          "",
          "# <weight>",
          "- Complexity: `O(1)`. Actual cost depends on the number of length of",
          "  `T::Keys::key_ids()` which is fixed.",
          "- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`",
          "- DbWrites: `origin account`, `NextKeys`",
          "- DbReads per key id: `KeyOwner`",
          "- DbWrites per key id: `KeyOwner`",
          "# </weight>"
        ],
        "args": [
          {
            "name": "keys",
            "type": "[U8; 32]",
            "type_name": "Keys"
          },
          {
            "name": "proof",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      },
      {
        "lookup": "1601",
        "name": "purge_keys",
        "docs": [
          "Removes any session key(s) of the function caller.",
          "",
          "This doesn't take effect until the next session.",
          "",
          "The dispatch origin of this function must be Signed and the account must be either be",
          "convertible to a validator ID using the chain's typical addressing system (this usually",
          "means being a controller account) or directly convertible into a validator ID (which",
          "usually means being a stash account).",
          "",
          "# <weight>",
          "- Complexity: `O(1)` in number of key types. Actual cost depends on the number of length",
          "  of `T::Keys::key_ids()` which is fixed.",
          "- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`",
          "- DbWrites: `NextKeys`, `origin account`",
          "- DbWrites per key id: `KeyOwner`",
          "# </weight>"
        ],
        "args": null
      }
    ],
    "calls_value": {
      "type": 178
    },
    "events": [
      {
        "lookup": "1600",
        "name": "NewSession",
        "docs": [
          "New session has happened. Note that the argument is the session index, not the",
          "block number as the type might suggest."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "session_index"
        ],
        "args_type_name": [
          "SessionIndex"
        ]
      }
    ],
    "events_value": {
      "type": 31
    },
    "errors": [
      {
        "name": "InvalidProof",
        "doc": [
          "Invalid ownership proof."
        ]
      },
      {
        "name": "NoAssociatedValidatorId",
        "doc": [
          "No associated validator ID for account."
        ]
      },
      {
        "name": "DuplicatedKey",
        "doc": [
          "Registered duplicate key."
        ]
      },
      {
        "name": "NoKeys",
        "doc": [
          "No keys are associated with this account."
        ]
      },
      {
        "name": "NoAccount",
        "doc": [
          "Key setting account is not live, so it's impossible to associate keys."
        ]
      }
    ],
    "errors_value": {
      "type": 179
    },
    "index": 22
  },
  {
    "name": "Aura",
    "prefix": "Aura",
    "storage": [
      {
        "name": "Authorities",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<[U8; 32]>",
          "PlainTypeValue": 180
        },
        "fallback": "0x00",
        "docs": [
          " The current authority set."
        ]
      },
      {
        "name": "CurrentSlot",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U64",
          "PlainTypeValue": 182
        },
        "fallback": "0x0000000000000000",
        "docs": [
          " The current slot of this block.",
          "",
          " This will be set in `on_initialize`."
        ]
      }
    ],
    "errors": null,
    "errors_value": null,
    "index": 23
  },
  {
    "name": "AuraExt",
    "prefix": "AuraExt",
    "storage": [
      {
        "name": "Authorities",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<[U8; 32]>",
          "PlainTypeValue": 181
        },
        "fallback": "0x00",
        "docs": [
          " Serves as cache for the authorities.",
          "",
          " The authorities in AuRa are overwritten in `on_initialize` when we switch to a new session,",
          " but we require the old authorities to verify the seal when validating a PoV. This will always",
          " be updated to the latest AuRa authorities in `on_finalize`."
        ]
      }
    ],
    "errors": null,
    "errors_value": null,
    "index": 24
  },
  {
    "name": "XcmpQueue",
    "prefix": "XcmpQueue",
    "storage": [
      {
        "name": "InboundXcmpStatus",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<cumulus_pallet_xcmp_queue:InboundChannelDetails>",
          "PlainTypeValue": 183
        },
        "fallback": "0x00",
        "docs": [
          " Status of the inbound XCMP channels."
        ]
      },
      {
        "name": "InboundXcmpMessages",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Twox64Concat"
            ],
            "key_vec": [
              "U32",
              "U32"
            ],
            "value": "Vec<U8>",
            "keys_id": 189,
            "value_id": 10
          }
        },
        "fallback": "0x00",
        "docs": [
          " Inbound aggregate XCMP messages. It can only be one per ParaId/block."
        ]
      },
      {
        "name": "OutboundXcmpStatus",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<cumulus_pallet_xcmp_queue:OutboundChannelDetails>",
          "PlainTypeValue": 190
        },
        "fallback": "0x00",
        "docs": [
          " The non-empty XCMP channels in order of becoming non-empty, and the index of the first",
          " and last outbound message. If the two indices are equal, then it indicates an empty",
          " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater",
          " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in",
          " case of the need to send a high-priority signal message this block.",
          " The bool is true if there is a signal message waiting to be sent."
        ]
      },
      {
        "name": "OutboundXcmpMessages",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Twox64Concat"
            ],
            "key_vec": [
              "U32",
              "U16"
            ],
            "value": "Vec<U8>",
            "keys_id": 193,
            "value_id": 10
          }
        },
        "fallback": "0x00",
        "docs": [
          " The messages outbound in a given XCMP channel."
        ]
      },
      {
        "name": "SignalMessages",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "Vec<U8>",
            "keys_id": 35,
            "value_id": 10
          }
        },
        "fallback": "0x00",
        "docs": [
          " Any signal messages waiting to be sent."
        ]
      },
      {
        "name": "QueueConfig",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "cumulus_pallet_xcmp_queue:QueueConfigData",
          "PlainTypeValue": 194
        },
        "fallback": "0x020000000500000001000000a086010000000000020000000000000000c817a804000000",
        "docs": [
          " The configuration which controls the dynamics of the outbound queue."
        ]
      },
      {
        "name": "Overweight",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U64"
            ],
            "value": "Tuple:U32U32Vec<U8>",
            "keys_id": 8,
            "value_id": 195
          }
        },
        "fallback": "0x00",
        "docs": [
          " The messages that exceeded max individual message weight budget.",
          "",
          " These message stay in this storage map until they are manually dispatched via",
          " `service_overweight`."
        ]
      },
      {
        "name": "OverweightCount",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U64",
          "PlainTypeValue": 8
        },
        "fallback": "0x0000000000000000",
        "docs": [
          " The number of overweight messages ever recorded in `Overweight`. Also doubles as the next",
          " available free overweight index."
        ]
      },
      {
        "name": "QueueSuspended",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 86
        },
        "fallback": "0x00",
        "docs": [
          " Whether or not the XCMP queue is suspended from executing incoming XCMs or not."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "1e00",
        "name": "service_overweight",
        "docs": [
          "Services a single overweight XCM.",
          "",
          "- `origin`: Must pass `ExecuteOverweightOrigin`.",
          "- `index`: The index of the overweight XCM to service",
          "- `weight_limit`: The amount of weight that XCM execution may take.",
          "",
          "Errors:",
          "- `BadOverweightIndex`: XCM under `index` is not found in the `Overweight` storage map.",
          "- `BadXcm`: XCM under `index` cannot be properly decoded into a valid XCM format.",
          "- `WeightOverLimit`: XCM execution may use greater `weight_limit`.",
          "",
          "Events:",
          "- `OverweightServiced`: On success."
        ],
        "args": [
          {
            "name": "index",
            "type": "U64",
            "type_name": "OverweightIndex"
          },
          {
            "name": "weight_limit",
            "type": "U64",
            "type_name": "Weight"
          }
        ]
      },
      {
        "lookup": "1e01",
        "name": "suspend_xcm_execution",
        "docs": [
          "Suspends all XCM executions for the XCMP queue, regardless of the sender's origin.",
          "",
          "- `origin`: Must pass `ControllerOrigin`."
        ],
        "args": null
      },
      {
        "lookup": "1e02",
        "name": "resume_xcm_execution",
        "docs": [
          "Resumes all XCM executions for the XCMP queue.",
          "",
          "Note that this function doesn't change the status of the in/out bound channels.",
          "",
          "- `origin`: Must pass `ControllerOrigin`."
        ],
        "args": null
      },
      {
        "lookup": "1e03",
        "name": "update_suspend_threshold",
        "docs": [
          "Overwrites the number of pages of messages which must be in the queue for the other side to be told to",
          "suspend their sending.",
          "",
          "- `origin`: Must pass `Root`.",
          "- `new`: Desired value for `QueueConfigData.suspend_value`"
        ],
        "args": [
          {
            "name": "new",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "1e04",
        "name": "update_drop_threshold",
        "docs": [
          "Overwrites the number of pages of messages which must be in the queue after which we drop any further",
          "messages from the channel.",
          "",
          "- `origin`: Must pass `Root`.",
          "- `new`: Desired value for `QueueConfigData.drop_threshold`"
        ],
        "args": [
          {
            "name": "new",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "1e05",
        "name": "update_resume_threshold",
        "docs": [
          "Overwrites the number of pages of messages which the queue must be reduced to before it signals that",
          "message sending may recommence after it has been suspended.",
          "",
          "- `origin`: Must pass `Root`.",
          "- `new`: Desired value for `QueueConfigData.resume_threshold`                                "
        ],
        "args": [
          {
            "name": "new",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "1e06",
        "name": "update_threshold_weight",
        "docs": [
          "Overwrites the amount of remaining weight under which we stop processing messages.",
          "",
          "- `origin`: Must pass `Root`.",
          "- `new`: Desired value for `QueueConfigData.threshold_weight`                                "
        ],
        "args": [
          {
            "name": "new",
            "type": "U64",
            "type_name": "Weight"
          }
        ]
      },
      {
        "lookup": "1e07",
        "name": "update_weight_restrict_decay",
        "docs": [
          "Overwrites the speed to which the available weight approaches the maximum weight.",
          "A lower number results in a faster progression. A value of 1 makes the entire weight available initially.",
          "",
          "- `origin`: Must pass `Root`.",
          "- `new`: Desired value for `QueueConfigData.weight_restrict_decay`.                                "
        ],
        "args": [
          {
            "name": "new",
            "type": "U64",
            "type_name": "Weight"
          }
        ]
      },
      {
        "lookup": "1e08",
        "name": "update_xcmp_max_individual_weight",
        "docs": [
          "Overwrite the maximum amount of weight any individual message may consume.",
          "Messages above this weight go into the overweight queue and may only be serviced explicitly.",
          "",
          "- `origin`: Must pass `Root`.",
          "- `new`: Desired value for `QueueConfigData.xcmp_max_individual_weight`.                                "
        ],
        "args": [
          {
            "name": "new",
            "type": "U64",
            "type_name": "Weight"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 196
    },
    "events": [
      {
        "lookup": "1e00",
        "name": "Success",
        "docs": [
          "Some XCM was executed ok."
        ],
        "args": [
          "option<H256>"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "Option<Hash>"
        ]
      },
      {
        "lookup": "1e01",
        "name": "Fail",
        "docs": [
          "Some XCM failed."
        ],
        "args": [
          "option<H256>",
          "xcm:v2:traits:Error"
        ],
        "args_name": [
          "",
          ""
        ],
        "args_type_name": [
          "Option<Hash>",
          "XcmError"
        ]
      },
      {
        "lookup": "1e02",
        "name": "BadVersion",
        "docs": [
          "Bad XCM version used."
        ],
        "args": [
          "option<H256>"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "Option<Hash>"
        ]
      },
      {
        "lookup": "1e03",
        "name": "BadFormat",
        "docs": [
          "Bad XCM format used."
        ],
        "args": [
          "option<H256>"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "Option<Hash>"
        ]
      },
      {
        "lookup": "1e04",
        "name": "UpwardMessageSent",
        "docs": [
          "An upward message was sent to the relay chain."
        ],
        "args": [
          "option<H256>"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "Option<Hash>"
        ]
      },
      {
        "lookup": "1e05",
        "name": "XcmpMessageSent",
        "docs": [
          "An HRMP message was sent to a sibling parachain."
        ],
        "args": [
          "option<H256>"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "Option<Hash>"
        ]
      },
      {
        "lookup": "1e06",
        "name": "OverweightEnqueued",
        "docs": [
          "An XCM exceeded the individual message weight budget."
        ],
        "args": [
          "U32",
          "U32",
          "U64",
          "U64"
        ],
        "args_name": [
          "",
          "",
          "",
          ""
        ],
        "args_type_name": [
          "ParaId",
          "RelayBlockNumber",
          "OverweightIndex",
          "Weight"
        ]
      },
      {
        "lookup": "1e07",
        "name": "OverweightServiced",
        "docs": [
          "An XCM from the overweight queue was executed with the given actual weight used."
        ],
        "args": [
          "U64",
          "U64"
        ],
        "args_name": [
          "",
          ""
        ],
        "args_type_name": [
          "OverweightIndex",
          "Weight"
        ]
      }
    ],
    "events_value": {
      "type": 32
    },
    "errors": [
      {
        "name": "FailedToSend",
        "doc": [
          "Failed to send XCM message."
        ]
      },
      {
        "name": "BadXcmOrigin",
        "doc": [
          "Bad XCM origin."
        ]
      },
      {
        "name": "BadXcm",
        "doc": [
          "Bad XCM data."
        ]
      },
      {
        "name": "BadOverweightIndex",
        "doc": [
          "Bad overweight index."
        ]
      },
      {
        "name": "WeightOverLimit",
        "doc": [
          "Provided weight is possibly not enough to execute the message."
        ]
      }
    ],
    "errors_value": {
      "type": 197
    },
    "index": 30
  },
  {
    "name": "PolkadotXcm",
    "prefix": "PolkadotXcm",
    "storage": [
      {
        "name": "QueryCounter",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U64",
          "PlainTypeValue": 8
        },
        "fallback": "0x0000000000000000",
        "docs": [
          " The latest available query index."
        ]
      },
      {
        "name": "Queries",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U64"
            ],
            "value": "pallet_xcm:pallet:QueryStatus",
            "keys_id": 8,
            "value_id": 198
          }
        },
        "fallback": "0x00",
        "docs": [
          " The ongoing queries."
        ]
      },
      {
        "name": "AssetTraps",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Identity"
            ],
            "key_vec": [
              "H256"
            ],
            "value": "U32",
            "keys_id": 9,
            "value_id": 4
          }
        },
        "fallback": "0x00000000",
        "docs": [
          " The existing asset traps.",
          "",
          " Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is the number of",
          " times this pair has been trapped (usually just 1 if it exists at all)."
        ]
      },
      {
        "name": "SafeXcmVersion",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00",
        "docs": [
          " Default version to encode XCM when latest version of destination is unknown. If `None`,",
          " then the destinations whose XCM version is unknown are considered unreachable."
        ]
      },
      {
        "name": "SupportedVersion",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "xcm:VersionedMultiLocation"
            ],
            "value": "U32",
            "keys_id": 204,
            "value_id": 4
          }
        },
        "fallback": "0x00",
        "docs": [
          " The Latest versions that we know various locations support."
        ]
      },
      {
        "name": "VersionNotifiers",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "xcm:VersionedMultiLocation"
            ],
            "value": "U64",
            "keys_id": 204,
            "value_id": 8
          }
        },
        "fallback": "0x00",
        "docs": [
          " All locations that we have requested version notifications from."
        ]
      },
      {
        "name": "VersionNotifyTargets",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "xcm:VersionedMultiLocation"
            ],
            "value": "Tuple:U64U64U32",
            "keys_id": 204,
            "value_id": 205
          }
        },
        "fallback": "0x00",
        "docs": [
          " The target locations that are subscribed to our version changes, as well as the most recent",
          " of our versions we informed them of."
        ]
      },
      {
        "name": "VersionDiscoveryQueue",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Tuple:xcm:VersionedMultiLocationU32>",
          "PlainTypeValue": 206
        },
        "fallback": "0x00",
        "docs": [
          " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and",
          " the `u32` counter is the number of times that a send to the destination has been attempted,",
          " which is used as a prioritization."
        ]
      },
      {
        "name": "CurrentMigration",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "pallet_xcm:pallet:VersionMigrationStage",
          "PlainTypeValue": 209
        },
        "fallback": "0x00",
        "docs": [
          " The current migration's stage, if any."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "1f00",
        "name": "send",
        "docs": null,
        "args": [
          {
            "name": "dest",
            "type": "xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "message",
            "type": "xcm:VersionedXcm@212",
            "type_name": "Box<VersionedXcm<()>>"
          }
        ]
      },
      {
        "lookup": "1f01",
        "name": "teleport_assets",
        "docs": [
          "Teleport some assets from the local chain to some destination chain.",
          "",
          "Fee payment on the destination side is made from the first asset listed in the `assets` vector and",
          "fee-weight is calculated locally and thus remote weights are assumed to be equal to",
          "local weights.",
          "",
          "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
          "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
          "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
          "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
          "  an `AccountId32` value.",
          "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
          "  `dest` side. May not be empty.",
          "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
          "  fees."
        ],
        "args": [
          {
            "name": "dest",
            "type": "xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "beneficiary",
            "type": "xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "assets",
            "type": "xcm:VersionedMultiAssets",
            "type_name": "Box<VersionedMultiAssets>"
          },
          {
            "name": "fee_asset_item",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "1f02",
        "name": "reserve_transfer_assets",
        "docs": [
          "Transfer some assets from the local chain to the sovereign account of a destination chain and forward",
          "a notification XCM.",
          "",
          "Fee payment on the destination side is made from the first asset listed in the `assets` vector and",
          "fee-weight is calculated locally and thus remote weights are assumed to be equal to",
          "local weights.",
          "",
          "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
          "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
          "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
          "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
          "  an `AccountId32` value.",
          "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
          "  `dest` side.",
          "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
          "  fees."
        ],
        "args": [
          {
            "name": "dest",
            "type": "xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "beneficiary",
            "type": "xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "assets",
            "type": "xcm:VersionedMultiAssets",
            "type_name": "Box<VersionedMultiAssets>"
          },
          {
            "name": "fee_asset_item",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "1f03",
        "name": "execute",
        "docs": [
          "Execute an XCM message from a local, signed, origin.",
          "",
          "An event is deposited indicating whether `msg` could be executed completely or only",
          "partially.",
          "",
          "No more than `max_weight` will be used in its attempted execution. If this is less than the",
          "maximum amount of weight that the message could take to be executed, then no execution",
          "attempt will be made.",
          "",
          "NOTE: A successful return to this does *not* imply that the `msg` was executed successfully",
          "to completion; only that *some* of it was executed."
        ],
        "args": [
          {
            "name": "message",
            "type": "xcm:VersionedXcm@221",
            "type_name": "Box<VersionedXcm<<T as SysConfig>::Call>>"
          },
          {
            "name": "max_weight",
            "type": "U64",
            "type_name": "Weight"
          }
        ]
      },
      {
        "lookup": "1f04",
        "name": "force_xcm_version",
        "docs": [
          "Extoll that a particular destination can be communicated with through a particular",
          "version of XCM.",
          "",
          "- `origin`: Must be Root.",
          "- `location`: The destination that is being described.",
          "- `xcm_version`: The latest version of XCM that `location` supports."
        ],
        "args": [
          {
            "name": "location",
            "type": "xcm:v1:multilocation:MultiLocation",
            "type_name": "Box<MultiLocation>"
          },
          {
            "name": "xcm_version",
            "type": "U32",
            "type_name": "XcmVersion"
          }
        ]
      },
      {
        "lookup": "1f05",
        "name": "force_default_xcm_version",
        "docs": [
          "Set a safe XCM version (the version that XCM should be encoded with if the most recent",
          "version a destination can accept is unknown).",
          "",
          "- `origin`: Must be Root.",
          "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
        ],
        "args": [
          {
            "name": "maybe_xcm_version",
            "type": "option<U32>",
            "type_name": "Option<XcmVersion>"
          }
        ]
      },
      {
        "lookup": "1f06",
        "name": "force_subscribe_version_notify",
        "docs": [
          "Ask a location to notify us regarding their XCM version and any changes to it.",
          "",
          "- `origin`: Must be Root.",
          "- `location`: The location to which we should subscribe for XCM version notifications."
        ],
        "args": [
          {
            "name": "location",
            "type": "xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          }
        ]
      },
      {
        "lookup": "1f07",
        "name": "force_unsubscribe_version_notify",
        "docs": [
          "Require that a particular destination should no longer notify us regarding any XCM",
          "version changes.",
          "",
          "- `origin`: Must be Root.",
          "- `location`: The location to which we are currently subscribed for XCM version",
          "  notifications which we no longer desire."
        ],
        "args": [
          {
            "name": "location",
            "type": "xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          }
        ]
      },
      {
        "lookup": "1f08",
        "name": "limited_reserve_transfer_assets",
        "docs": [
          "Transfer some assets from the local chain to the sovereign account of a destination chain and forward",
          "a notification XCM.",
          "",
          "Fee payment on the destination side is made from the first asset listed in the `assets` vector.",
          "",
          "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
          "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
          "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
          "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
          "  an `AccountId32` value.",
          "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
          "  `dest` side.",
          "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
          "  fees.",
          "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
        ],
        "args": [
          {
            "name": "dest",
            "type": "xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "beneficiary",
            "type": "xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "assets",
            "type": "xcm:VersionedMultiAssets",
            "type_name": "Box<VersionedMultiAssets>"
          },
          {
            "name": "fee_asset_item",
            "type": "U32",
            "type_name": "u32"
          },
          {
            "name": "weight_limit",
            "type": "xcm:v2:WeightLimit",
            "type_name": "WeightLimit"
          }
        ]
      },
      {
        "lookup": "1f09",
        "name": "limited_teleport_assets",
        "docs": [
          "Teleport some assets from the local chain to some destination chain.",
          "",
          "Fee payment on the destination side is made from the first asset listed in the `assets` vector.",
          "",
          "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
          "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
          "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
          "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
          "  an `AccountId32` value.",
          "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
          "  `dest` side. May not be empty.",
          "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
          "  fees.",
          "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
        ],
        "args": [
          {
            "name": "dest",
            "type": "xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "beneficiary",
            "type": "xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "assets",
            "type": "xcm:VersionedMultiAssets",
            "type_name": "Box<VersionedMultiAssets>"
          },
          {
            "name": "fee_asset_item",
            "type": "U32",
            "type_name": "u32"
          },
          {
            "name": "weight_limit",
            "type": "xcm:v2:WeightLimit",
            "type_name": "WeightLimit"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 211
    },
    "events": [
      {
        "lookup": "1f00",
        "name": "Attempted",
        "docs": [
          "Execution of an XCM message was attempted.",
          "",
          "\\[ outcome \\]"
        ],
        "args": [
          "xcm:v2:traits:Outcome"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "xcm::latest::Outcome"
        ]
      },
      {
        "lookup": "1f01",
        "name": "Sent",
        "docs": [
          "A XCM message was sent.",
          "",
          "\\[ origin, destination, message \\]"
        ],
        "args": [
          "xcm:v1:multilocation:MultiLocation",
          "xcm:v1:multilocation:MultiLocation",
          "Vec<xcm:v2:Instruction@50>"
        ],
        "args_name": [
          "",
          "",
          ""
        ],
        "args_type_name": [
          "MultiLocation",
          "MultiLocation",
          "Xcm<()>"
        ]
      },
      {
        "lookup": "1f02",
        "name": "UnexpectedResponse",
        "docs": [
          "Query response received which does not match a registered query. This may be because a",
          "matching query was never registered, it may be because it is a duplicate response, or",
          "because the query timed out.",
          "",
          "\\[ origin location, id \\]"
        ],
        "args": [
          "xcm:v1:multilocation:MultiLocation",
          "U64"
        ],
        "args_name": [
          "",
          ""
        ],
        "args_type_name": [
          "MultiLocation",
          "QueryId"
        ]
      },
      {
        "lookup": "1f03",
        "name": "ResponseReady",
        "docs": [
          "Query response has been received and is ready for taking with `take_response`. There is",
          "no registered notification call.",
          "",
          "\\[ id, response \\]"
        ],
        "args": [
          "U64",
          "xcm:v2:Response"
        ],
        "args_name": [
          "",
          ""
        ],
        "args_type_name": [
          "QueryId",
          "Response"
        ]
      },
      {
        "lookup": "1f04",
        "name": "Notified",
        "docs": [
          "Query response has been received and query is removed. The registered notification has",
          "been dispatched and executed successfully.",
          "",
          "\\[ id, pallet index, call index \\]"
        ],
        "args": [
          "U64",
          "U8",
          "U8"
        ],
        "args_name": [
          "",
          "",
          ""
        ],
        "args_type_name": [
          "QueryId",
          "u8",
          "u8"
        ]
      },
      {
        "lookup": "1f05",
        "name": "NotifyOverweight",
        "docs": [
          "Query response has been received and query is removed. The registered notification could",
          "not be dispatched because the dispatch weight is greater than the maximum weight",
          "originally budgeted by this runtime for the query result.",
          "",
          "\\[ id, pallet index, call index, actual weight, max budgeted weight \\]"
        ],
        "args": [
          "U64",
          "U8",
          "U8",
          "U64",
          "U64"
        ],
        "args_name": [
          "",
          "",
          "",
          "",
          ""
        ],
        "args_type_name": [
          "QueryId",
          "u8",
          "u8",
          "Weight",
          "Weight"
        ]
      },
      {
        "lookup": "1f06",
        "name": "NotifyDispatchError",
        "docs": [
          "Query response has been received and query is removed. There was a general error with",
          "dispatching the notification call.",
          "",
          "\\[ id, pallet index, call index \\]"
        ],
        "args": [
          "U64",
          "U8",
          "U8"
        ],
        "args_name": [
          "",
          "",
          ""
        ],
        "args_type_name": [
          "QueryId",
          "u8",
          "u8"
        ]
      },
      {
        "lookup": "1f07",
        "name": "NotifyDecodeFailed",
        "docs": [
          "Query response has been received and query is removed. The dispatch was unable to be",
          "decoded into a `Call`; this might be due to dispatch function having a signature which",
          "is not `(origin, QueryId, Response)`.",
          "",
          "\\[ id, pallet index, call index \\]"
        ],
        "args": [
          "U64",
          "U8",
          "U8"
        ],
        "args_name": [
          "",
          "",
          ""
        ],
        "args_type_name": [
          "QueryId",
          "u8",
          "u8"
        ]
      },
      {
        "lookup": "1f08",
        "name": "InvalidResponder",
        "docs": [
          "Expected query response has been received but the origin location of the response does",
          "not match that expected. The query remains registered for a later, valid, response to",
          "be received and acted upon.",
          "",
          "\\[ origin location, id, expected location \\]"
        ],
        "args": [
          "xcm:v1:multilocation:MultiLocation",
          "U64",
          "option<xcm:v1:multilocation:MultiLocation>"
        ],
        "args_name": [
          "",
          "",
          ""
        ],
        "args_type_name": [
          "MultiLocation",
          "QueryId",
          "Option<MultiLocation>"
        ]
      },
      {
        "lookup": "1f09",
        "name": "InvalidResponderVersion",
        "docs": [
          "Expected query response has been received but the expected origin location placed in",
          "storage by this runtime previously cannot be decoded. The query remains registered.",
          "",
          "This is unexpected (since a location placed in storage in a previously executing",
          "runtime should be readable prior to query timeout) and dangerous since the possibly",
          "valid response will be dropped. Manual governance intervention is probably going to be",
          "needed.",
          "",
          "\\[ origin location, id \\]"
        ],
        "args": [
          "xcm:v1:multilocation:MultiLocation",
          "U64"
        ],
        "args_name": [
          "",
          ""
        ],
        "args_type_name": [
          "MultiLocation",
          "QueryId"
        ]
      },
      {
        "lookup": "1f0a",
        "name": "ResponseTaken",
        "docs": [
          "Received query response has been read and removed.",
          "",
          "\\[ id \\]"
        ],
        "args": [
          "U64"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "QueryId"
        ]
      },
      {
        "lookup": "1f0b",
        "name": "AssetsTrapped",
        "docs": [
          "Some assets have been placed in an asset trap.",
          "",
          "\\[ hash, origin, assets \\]"
        ],
        "args": [
          "H256",
          "xcm:v1:multilocation:MultiLocation",
          "xcm:VersionedMultiAssets"
        ],
        "args_name": [
          "",
          "",
          ""
        ],
        "args_type_name": [
          "H256",
          "MultiLocation",
          "VersionedMultiAssets"
        ]
      },
      {
        "lookup": "1f0c",
        "name": "VersionChangeNotified",
        "docs": [
          "An XCM version change notification message has been attempted to be sent.",
          "",
          "\\[ destination, result \\]"
        ],
        "args": [
          "xcm:v1:multilocation:MultiLocation",
          "U32"
        ],
        "args_name": [
          "",
          ""
        ],
        "args_type_name": [
          "MultiLocation",
          "XcmVersion"
        ]
      },
      {
        "lookup": "1f0d",
        "name": "SupportedVersionChanged",
        "docs": [
          "The supported version of a location has been changed. This might be through an",
          "automatic notification or a manual intervention.",
          "",
          "\\[ location, XCM version \\]"
        ],
        "args": [
          "xcm:v1:multilocation:MultiLocation",
          "U32"
        ],
        "args_name": [
          "",
          ""
        ],
        "args_type_name": [
          "MultiLocation",
          "XcmVersion"
        ]
      },
      {
        "lookup": "1f0e",
        "name": "NotifyTargetSendFail",
        "docs": [
          "A given location which had a version change subscription was dropped owing to an error",
          "sending the notification to it.",
          "",
          "\\[ location, query ID, error \\]"
        ],
        "args": [
          "xcm:v1:multilocation:MultiLocation",
          "U64",
          "xcm:v2:traits:Error"
        ],
        "args_name": [
          "",
          "",
          ""
        ],
        "args_type_name": [
          "MultiLocation",
          "QueryId",
          "XcmError"
        ]
      },
      {
        "lookup": "1f0f",
        "name": "NotifyTargetMigrationFail",
        "docs": [
          "A given location which had a version change subscription was dropped owing to an error",
          "migrating the location to our new XCM format.",
          "",
          "\\[ location, query ID \\]"
        ],
        "args": [
          "xcm:VersionedMultiLocation",
          "U64"
        ],
        "args_name": [
          "",
          ""
        ],
        "args_type_name": [
          "VersionedMultiLocation",
          "QueryId"
        ]
      }
    ],
    "events_value": {
      "type": 36
    },
    "errors": [
      {
        "name": "Unreachable",
        "doc": [
          "The desired destination was unreachable, generally because there is a no way of routing",
          "to it."
        ]
      },
      {
        "name": "SendFailure",
        "doc": [
          "There was some other issue (i.e. not to do with routing) in sending the message. Perhaps",
          "a lack of space for buffering the message."
        ]
      },
      {
        "name": "Filtered",
        "doc": [
          "The message execution fails the filter."
        ]
      },
      {
        "name": "UnweighableMessage",
        "doc": [
          "The message's weight could not be determined."
        ]
      },
      {
        "name": "DestinationNotInvertible",
        "doc": [
          "The destination `MultiLocation` provided cannot be inverted."
        ]
      },
      {
        "name": "Empty",
        "doc": [
          "The assets to be sent are empty."
        ]
      },
      {
        "name": "CannotReanchor",
        "doc": [
          "Could not re-anchor the assets to declare the fees for the destination chain."
        ]
      },
      {
        "name": "TooManyAssets",
        "doc": [
          "Too many assets have been attempted for transfer."
        ]
      },
      {
        "name": "InvalidOrigin",
        "doc": [
          "Origin is invalid for sending."
        ]
      },
      {
        "name": "BadVersion",
        "doc": [
          "The version of the `Versioned` value used is not able to be interpreted."
        ]
      },
      {
        "name": "BadLocation",
        "doc": [
          "The given location could not be used (e.g. because it cannot be expressed in the",
          "desired version of XCM)."
        ]
      },
      {
        "name": "NoSubscription",
        "doc": [
          "The referenced subscription could not be found."
        ]
      },
      {
        "name": "AlreadySubscribed",
        "doc": [
          "The location is invalid since it already has a subscription from us."
        ]
      }
    ],
    "errors_value": {
      "type": 234
    },
    "index": 31
  },
  {
    "name": "CumulusXcm",
    "prefix": "",
    "storage": null,
    "events": [
      {
        "lookup": "2000",
        "name": "InvalidFormat",
        "docs": [
          "Downward message is invalid XCM.",
          "\\[ id \\]"
        ],
        "args": [
          "[U8; 8]"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "[u8; 8]"
        ]
      },
      {
        "lookup": "2001",
        "name": "UnsupportedVersion",
        "docs": [
          "Downward message is unsupported version of XCM.",
          "\\[ id \\]"
        ],
        "args": [
          "[U8; 8]"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "[u8; 8]"
        ]
      },
      {
        "lookup": "2002",
        "name": "ExecutedDownward",
        "docs": [
          "Downward message executed with the given outcome.",
          "\\[ id, outcome \\]"
        ],
        "args": [
          "[U8; 8]",
          "xcm:v2:traits:Outcome"
        ],
        "args_name": [
          "",
          ""
        ],
        "args_type_name": [
          "[u8; 8]",
          "Outcome"
        ]
      }
    ],
    "events_value": {
      "type": 75
    },
    "errors": null,
    "errors_value": {
      "type": 235
    },
    "index": 32
  },
  {
    "name": "DmpQueue",
    "prefix": "DmpQueue",
    "storage": [
      {
        "name": "Configuration",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U64",
          "PlainTypeValue": 236
        },
        "fallback": "0x00e40b5402000000",
        "docs": [
          " The configuration."
        ]
      },
      {
        "name": "PageIndex",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "cumulus_pallet_dmp_queue:PageIndexData",
          "PlainTypeValue": 237
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " The page index."
        ]
      },
      {
        "name": "Pages",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "Vec<Tuple:U32Vec<U8>>",
            "keys_id": 4,
            "value_id": 238
          }
        },
        "fallback": "0x00",
        "docs": [
          " The queue pages."
        ]
      },
      {
        "name": "Overweight",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U64"
            ],
            "value": "Tuple:U32Vec<U8>",
            "keys_id": 8,
            "value_id": 239
          }
        },
        "fallback": "0x00",
        "docs": [
          " The overweight messages."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "2100",
        "name": "service_overweight",
        "docs": [
          "Service a single overweight message.",
          "",
          "- `origin`: Must pass `ExecuteOverweightOrigin`.",
          "- `index`: The index of the overweight message to service.",
          "- `weight_limit`: The amount of weight that message execution may take.",
          "",
          "Errors:",
          "- `Unknown`: Message of `index` is unknown.",
          "- `OverLimit`: Message execution may use greater than `weight_limit`.",
          "",
          "Events:",
          "- `OverweightServiced`: On success."
        ],
        "args": [
          {
            "name": "index",
            "type": "U64",
            "type_name": "OverweightIndex"
          },
          {
            "name": "weight_limit",
            "type": "U64",
            "type_name": "Weight"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 240
    },
    "events": [
      {
        "lookup": "2100",
        "name": "InvalidFormat",
        "docs": [
          "Downward message is invalid XCM.",
          "\\[ id \\]"
        ],
        "args": [
          "[U8; 32]"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "MessageId"
        ]
      },
      {
        "lookup": "2101",
        "name": "UnsupportedVersion",
        "docs": [
          "Downward message is unsupported version of XCM.",
          "\\[ id \\]"
        ],
        "args": [
          "[U8; 32]"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "MessageId"
        ]
      },
      {
        "lookup": "2102",
        "name": "ExecutedDownward",
        "docs": [
          "Downward message executed with the given outcome.",
          "\\[ id, outcome \\]"
        ],
        "args": [
          "[U8; 32]",
          "xcm:v2:traits:Outcome"
        ],
        "args_name": [
          "",
          ""
        ],
        "args_type_name": [
          "MessageId",
          "Outcome"
        ]
      },
      {
        "lookup": "2103",
        "name": "WeightExhausted",
        "docs": [
          "The weight limit for handling downward messages was reached.",
          "\\[ id, remaining, required \\]"
        ],
        "args": [
          "[U8; 32]",
          "U64",
          "U64"
        ],
        "args_name": [
          "",
          "",
          ""
        ],
        "args_type_name": [
          "MessageId",
          "Weight",
          "Weight"
        ]
      },
      {
        "lookup": "2104",
        "name": "OverweightEnqueued",
        "docs": [
          "Downward message is overweight and was placed in the overweight queue.",
          "\\[ id, index, required \\]"
        ],
        "args": [
          "[U8; 32]",
          "U64",
          "U64"
        ],
        "args_name": [
          "",
          "",
          ""
        ],
        "args_type_name": [
          "MessageId",
          "OverweightIndex",
          "Weight"
        ]
      },
      {
        "lookup": "2105",
        "name": "OverweightServiced",
        "docs": [
          "Downward message from the overweight queue was executed.",
          "\\[ index, used \\]"
        ],
        "args": [
          "U64",
          "U64"
        ],
        "args_name": [
          "",
          ""
        ],
        "args_type_name": [
          "OverweightIndex",
          "Weight"
        ]
      }
    ],
    "events_value": {
      "type": 76
    },
    "errors": [
      {
        "name": "Unknown",
        "doc": [
          "The message index given is unknown."
        ]
      },
      {
        "name": "OverLimit",
        "doc": [
          "The amount of weight given is possibly not enough for executing the message."
        ]
      }
    ],
    "errors_value": {
      "type": 241
    },
    "index": 33
  },
  {
    "name": "Utility",
    "prefix": "",
    "storage": null,
    "calls": [
      {
        "lookup": "2800",
        "name": "batch",
        "docs": [
          "Send a batch of dispatch calls.",
          "",
          "May be called from any origin.",
          "",
          "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
          "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
          "",
          "If origin is root then call are dispatch without checking origin filter. (This includes",
          "bypassing `frame_system::Config::BaseCallFilter`).",
          "",
          "# <weight>",
          "- Complexity: O(C) where C is the number of calls to be batched.",
          "# </weight>",
          "",
          "This will return `Ok` in all circumstances. To determine the success of the batch, an",
          "event is deposited. If a call failed and the batch was interrupted, then the",
          "`BatchInterrupted` event is deposited, along with the number of successful calls made",
          "and the error of the failed call. If all were successful, then the `BatchCompleted`",
          "event is deposited."
        ],
        "args": [
          {
            "name": "calls",
            "type": "Vec<Call>",
            "type_name": "Vec<<T as Config>::Call>"
          }
        ]
      },
      {
        "lookup": "2801",
        "name": "as_derivative",
        "docs": [
          "Send a call through an indexed pseudonym of the sender.",
          "",
          "Filter from origin are passed along. The call will be dispatched with an origin which",
          "use the same filter as the origin of this call.",
          "",
          "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
          "because you expect `proxy` to have been used prior in the call stack and you do not want",
          "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
          "in the Multisig pallet instead.",
          "",
          "NOTE: Prior to version *12, this was called `as_limited_sub`.",
          "",
          "The dispatch origin for this call must be _Signed_."
        ],
        "args": [
          {
            "name": "index",
            "type": "U16",
            "type_name": "u16"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::Call>"
          }
        ]
      },
      {
        "lookup": "2802",
        "name": "batch_all",
        "docs": [
          "Send a batch of dispatch calls and atomically execute them.",
          "The whole transaction will rollback and fail if any of the calls failed.",
          "",
          "May be called from any origin.",
          "",
          "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
          "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
          "",
          "If origin is root then call are dispatch without checking origin filter. (This includes",
          "bypassing `frame_system::Config::BaseCallFilter`).",
          "",
          "# <weight>",
          "- Complexity: O(C) where C is the number of calls to be batched.",
          "# </weight>"
        ],
        "args": [
          {
            "name": "calls",
            "type": "Vec<Call>",
            "type_name": "Vec<<T as Config>::Call>"
          }
        ]
      },
      {
        "lookup": "2803",
        "name": "dispatch_as",
        "docs": [
          "Dispatches a function call with a provided origin.",
          "",
          "The dispatch origin for this call must be _Root_.",
          "",
          "# <weight>",
          "- O(1).",
          "- Limited storage reads.",
          "- One DB write (event).",
          "- Weight of derivative `call` execution + T::WeightInfo::dispatch_as().",
          "# </weight>"
        ],
        "args": [
          {
            "name": "as_origin",
            "type": "statemint_runtime:OriginCaller",
            "type_name": "Box<PalletsOrigin>"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::Call>"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 242
    },
    "events": [
      {
        "lookup": "2800",
        "name": "BatchInterrupted",
        "docs": [
          "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
          "well as the error."
        ],
        "args": [
          "U32",
          "sp_runtime:DispatchError"
        ],
        "args_name": [
          "index",
          "error"
        ],
        "args_type_name": [
          "u32",
          "DispatchError"
        ]
      },
      {
        "lookup": "2801",
        "name": "BatchCompleted",
        "docs": [
          "Batch of dispatches completed fully with no error."
        ],
        "args": null
      },
      {
        "lookup": "2802",
        "name": "ItemCompleted",
        "docs": [
          "A single item within a Batch of dispatches has completed with no error."
        ],
        "args": null
      },
      {
        "lookup": "2803",
        "name": "DispatchedAs",
        "docs": [
          "A call was dispatched."
        ],
        "args": [
          "Result<NULL,sp_runtime:DispatchError>"
        ],
        "args_name": [
          "result"
        ],
        "args_type_name": [
          "DispatchResult"
        ]
      }
    ],
    "events_value": {
      "type": 77
    },
    "constants": [
      {
        "name": "batched_calls_limit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "aa2a0000",
        "docs": [
          " The limit on the number of batched calls."
        ]
      }
    ],
    "errors": [
      {
        "name": "TooManyCalls",
        "doc": [
          "Too many calls batched."
        ]
      }
    ],
    "errors_value": {
      "type": 260
    },
    "index": 40
  },
  {
    "name": "Multisig",
    "prefix": "Multisig",
    "storage": [
      {
        "name": "Multisigs",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId",
              "[U8; 32]"
            ],
            "value": "pallet_multisig:Multisig",
            "keys_id": 261,
            "value_id": 262
          }
        },
        "fallback": "0x00",
        "docs": [
          " The set of open multisig operations."
        ]
      },
      {
        "name": "Calls",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Identity"
            ],
            "key_vec": [
              "[U8; 32]"
            ],
            "value": "Tuple:WrapperOpaque<Call>AccountIdU128",
            "keys_id": 1,
            "value_id": 263
          }
        },
        "fallback": "0x00",
        "docs": null
      }
    ],
    "calls": [
      {
        "lookup": "2900",
        "name": "as_multi_threshold_1",
        "docs": [
          "Immediately dispatch a multi-signature call using a single approval from the caller.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "- `other_signatories`: The accounts (other than the sender) who are part of the",
          "multi-signature, but do not participate in the approval process.",
          "- `call`: The call to be executed.",
          "",
          "Result is equivalent to the dispatched result.",
          "",
          "# <weight>",
          "O(Z + C) where Z is the length of the call and C its execution weight.",
          "-------------------------------",
          "- DB Weight: None",
          "- Plus Call Weight",
          "# </weight>"
        ],
        "args": [
          {
            "name": "other_signatories",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::Call>"
          }
        ]
      },
      {
        "lookup": "2901",
        "name": "as_multi",
        "docs": [
          "Register approval for a dispatch to be made from a deterministic composite account if",
          "approved by a total of `threshold - 1` of `other_signatories`.",
          "",
          "If there are enough, then dispatch the call.",
          "",
          "Payment: `DepositBase` will be reserved if this is the first approval, plus",
          "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
          "is cancelled.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "- `threshold`: The total number of approvals for this dispatch before it is executed.",
          "- `other_signatories`: The accounts (other than the sender) who can approve this",
          "dispatch. May not be empty.",
          "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
          "not the first approval, then it must be `Some`, with the timepoint (block number and",
          "transaction index) of the first approval transaction.",
          "- `call`: The call to be executed.",
          "",
          "NOTE: Unless this is the final approval, you will generally want to use",
          "`approve_as_multi` instead, since it only requires a hash of the call.",
          "",
          "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
          "on success, result is `Ok` and the result from the interior call, if it was executed,",
          "may be found in the deposited `MultisigExecuted` event.",
          "",
          "# <weight>",
          "- `O(S + Z + Call)`.",
          "- Up to one balance-reserve or unreserve operation.",
          "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
          "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
          "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
          "- One encode & hash, both of complexity `O(S)`.",
          "- Up to one binary search and insert (`O(logS + S)`).",
          "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
          "- One event.",
          "- The weight of the `call`.",
          "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
          "  taken for its lifetime of `DepositBase + threshold * DepositFactor`.",
          "-------------------------------",
          "- DB Weight:",
          "    - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)",
          "    - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)",
          "- Plus Call Weight",
          "# </weight>"
        ],
        "args": [
          {
            "name": "threshold",
            "type": "U16",
            "type_name": "u16"
          },
          {
            "name": "other_signatories",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          },
          {
            "name": "maybe_timepoint",
            "type": "option<pallet_multisig:Timepoint>",
            "type_name": "Option<Timepoint<BlockNumber>>"
          },
          {
            "name": "call",
            "type": "WrapperOpaque<Call>",
            "type_name": "OpaqueCall"
          },
          {
            "name": "store_call",
            "type": "Bool",
            "type_name": "bool"
          },
          {
            "name": "max_weight",
            "type": "U64",
            "type_name": "Weight"
          }
        ]
      },
      {
        "lookup": "2902",
        "name": "approve_as_multi",
        "docs": [
          "Register approval for a dispatch to be made from a deterministic composite account if",
          "approved by a total of `threshold - 1` of `other_signatories`.",
          "",
          "Payment: `DepositBase` will be reserved if this is the first approval, plus",
          "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
          "is cancelled.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "- `threshold`: The total number of approvals for this dispatch before it is executed.",
          "- `other_signatories`: The accounts (other than the sender) who can approve this",
          "dispatch. May not be empty.",
          "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
          "not the first approval, then it must be `Some`, with the timepoint (block number and",
          "transaction index) of the first approval transaction.",
          "- `call_hash`: The hash of the call to be executed.",
          "",
          "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
          "",
          "# <weight>",
          "- `O(S)`.",
          "- Up to one balance-reserve or unreserve operation.",
          "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
          "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
          "- One encode & hash, both of complexity `O(S)`.",
          "- Up to one binary search and insert (`O(logS + S)`).",
          "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
          "- One event.",
          "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
          "  taken for its lifetime of `DepositBase + threshold * DepositFactor`.",
          "----------------------------------",
          "- DB Weight:",
          "    - Read: Multisig Storage, [Caller Account]",
          "    - Write: Multisig Storage, [Caller Account]",
          "# </weight>"
        ],
        "args": [
          {
            "name": "threshold",
            "type": "U16",
            "type_name": "u16"
          },
          {
            "name": "other_signatories",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          },
          {
            "name": "maybe_timepoint",
            "type": "option<pallet_multisig:Timepoint>",
            "type_name": "Option<Timepoint<BlockNumber>>"
          },
          {
            "name": "call_hash",
            "type": "[U8; 32]",
            "type_name": "[u8; 32]"
          },
          {
            "name": "max_weight",
            "type": "U64",
            "type_name": "Weight"
          }
        ]
      },
      {
        "lookup": "2903",
        "name": "cancel_as_multi",
        "docs": [
          "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
          "for this operation will be unreserved on success.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "- `threshold`: The total number of approvals for this dispatch before it is executed.",
          "- `other_signatories`: The accounts (other than the sender) who can approve this",
          "dispatch. May not be empty.",
          "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
          "transaction for this dispatch.",
          "- `call_hash`: The hash of the call to be executed.",
          "",
          "# <weight>",
          "- `O(S)`.",
          "- Up to one balance-reserve or unreserve operation.",
          "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
          "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
          "- One encode & hash, both of complexity `O(S)`.",
          "- One event.",
          "- I/O: 1 read `O(S)`, one remove.",
          "- Storage: removes one item.",
          "----------------------------------",
          "- DB Weight:",
          "    - Read: Multisig Storage, [Caller Account], Refund Account, Calls",
          "    - Write: Multisig Storage, [Caller Account], Refund Account, Calls",
          "# </weight>"
        ],
        "args": [
          {
            "name": "threshold",
            "type": "U16",
            "type_name": "u16"
          },
          {
            "name": "other_signatories",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          },
          {
            "name": "timepoint",
            "type": "pallet_multisig:Timepoint",
            "type_name": "Timepoint<BlockNumber>"
          },
          {
            "name": "call_hash",
            "type": "[U8; 32]",
            "type_name": "[u8; 32]"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 245
    },
    "events": [
      {
        "lookup": "2900",
        "name": "NewMultisig",
        "docs": [
          "A new multisig operation has begun."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "[U8; 32]"
        ],
        "args_name": [
          "approving",
          "multisig",
          "call_hash"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "CallHash"
        ]
      },
      {
        "lookup": "2901",
        "name": "MultisigApproval",
        "docs": [
          "A multisig operation has been approved by someone."
        ],
        "args": [
          "AccountId",
          "pallet_multisig:Timepoint",
          "AccountId",
          "[U8; 32]"
        ],
        "args_name": [
          "approving",
          "timepoint",
          "multisig",
          "call_hash"
        ],
        "args_type_name": [
          "AccountId",
          "Timepoint<BlockNumber>",
          "AccountId",
          "CallHash"
        ]
      },
      {
        "lookup": "2902",
        "name": "MultisigExecuted",
        "docs": [
          "A multisig operation has been executed."
        ],
        "args": [
          "AccountId",
          "pallet_multisig:Timepoint",
          "AccountId",
          "[U8; 32]",
          "Result<NULL,sp_runtime:DispatchError>"
        ],
        "args_name": [
          "approving",
          "timepoint",
          "multisig",
          "call_hash",
          "result"
        ],
        "args_type_name": [
          "AccountId",
          "Timepoint<BlockNumber>",
          "AccountId",
          "CallHash",
          "DispatchResult"
        ]
      },
      {
        "lookup": "2903",
        "name": "MultisigCancelled",
        "docs": [
          "A multisig operation has been cancelled."
        ],
        "args": [
          "AccountId",
          "pallet_multisig:Timepoint",
          "AccountId",
          "[U8; 32]"
        ],
        "args_name": [
          "cancelling",
          "timepoint",
          "multisig",
          "call_hash"
        ],
        "args_type_name": [
          "AccountId",
          "Timepoint<BlockNumber>",
          "AccountId",
          "CallHash"
        ]
      }
    ],
    "events_value": {
      "type": 80
    },
    "constants": [
      {
        "name": "DepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "008e56ad040000000000000000000000",
        "docs": [
          " The base amount of currency needed to reserve for creating a multisig execution or to",
          " store a dispatch call for later.",
          "",
          " This is held for an additional storage item whose value size is",
          " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
          " `32 + sizeof(AccountId)` bytes."
        ]
      },
      {
        "name": "DepositFactor",
        "type": "U128",
        "type_value": 6,
        "constants_value": "0048e801000000000000000000000000",
        "docs": [
          " The amount of currency needed per unit threshold when creating a multisig execution.",
          "",
          " This is held for adding 32 bytes more into a pre-existing storage value."
        ]
      },
      {
        "name": "MaxSignatories",
        "type": "U16",
        "type_value": 84,
        "constants_value": "6400",
        "docs": [
          " The maximum amount of signatories allowed in the multisig."
        ]
      }
    ],
    "errors": [
      {
        "name": "MinimumThreshold",
        "doc": [
          "Threshold must be 2 or greater."
        ]
      },
      {
        "name": "AlreadyApproved",
        "doc": [
          "Call is already approved by this signatory."
        ]
      },
      {
        "name": "NoApprovalsNeeded",
        "doc": [
          "Call doesn't need any (more) approvals."
        ]
      },
      {
        "name": "TooFewSignatories",
        "doc": [
          "There are too few signatories in the list."
        ]
      },
      {
        "name": "TooManySignatories",
        "doc": [
          "There are too many signatories in the list."
        ]
      },
      {
        "name": "SignatoriesOutOfOrder",
        "doc": [
          "The signatories were provided out of order; they should be ordered."
        ]
      },
      {
        "name": "SenderInSignatories",
        "doc": [
          "The sender was contained in the other signatories; it shouldn't be."
        ]
      },
      {
        "name": "NotFound",
        "doc": [
          "Multisig operation not found when attempting to cancel."
        ]
      },
      {
        "name": "NotOwner",
        "doc": [
          "Only the account that originally created the multisig is able to cancel it."
        ]
      },
      {
        "name": "NoTimepoint",
        "doc": [
          "No timepoint was given, yet the multisig operation is already underway."
        ]
      },
      {
        "name": "WrongTimepoint",
        "doc": [
          "A different timepoint was given to the multisig operation that is underway."
        ]
      },
      {
        "name": "UnexpectedTimepoint",
        "doc": [
          "A timepoint was given, yet no multisig operation is underway."
        ]
      },
      {
        "name": "MaxWeightTooLow",
        "doc": [
          "The maximum weight information provided was too low."
        ]
      },
      {
        "name": "AlreadyStored",
        "doc": [
          "The data to be stored is already stored."
        ]
      }
    ],
    "errors_value": {
      "type": 264
    },
    "index": 41
  },
  {
    "name": "Proxy",
    "prefix": "Proxy",
    "storage": [
      {
        "name": "Proxies",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Tuple:frame_support:storage:bounded_vec:BoundedVec@266U128",
            "keys_id": 0,
            "value_id": 265
          }
        },
        "fallback": "0x0000000000000000000000000000000000",
        "docs": [
          " The set of account proxies. Maps the account which has delegated to the accounts",
          " which are being delegated to, together with the amount held on deposit."
        ]
      },
      {
        "name": "Announcements",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Tuple:frame_support:storage:bounded_vec:BoundedVec@270U128",
            "keys_id": 0,
            "value_id": 269
          }
        },
        "fallback": "0x0000000000000000000000000000000000",
        "docs": [
          " The announcements made by the proxy (key)."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "2a00",
        "name": "proxy",
        "docs": [
          "Dispatch the given `call` from an account that the sender is authorised for through",
          "`add_proxy`.",
          "",
          "Removes any corresponding announcement(s).",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "Parameters:",
          "- `real`: The account that the proxy will make a call on behalf of.",
          "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
          "- `call`: The call to be made by the `real` account.",
          "",
          "# <weight>",
          "Weight is a function of the number of proxies the user has (P).",
          "# </weight>"
        ],
        "args": [
          {
            "name": "real",
            "type": "AccountId",
            "type_name": "AccountId"
          },
          {
            "name": "force_proxy_type",
            "type": "option<statemint_runtime:ProxyType>",
            "type_name": "Option<ProxyType>"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::Call>"
          }
        ]
      },
      {
        "lookup": "2a01",
        "name": "add_proxy",
        "docs": [
          "Register a proxy account for the sender that is able to make calls on its behalf.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "Parameters:",
          "- `proxy`: The account that the `caller` would like to make a proxy.",
          "- `proxy_type`: The permissions allowed for this proxy account.",
          "- `delay`: The announcement period required of the initial proxy. Will generally be",
          "zero.",
          "",
          "# <weight>",
          "Weight is a function of the number of proxies the user has (P).",
          "# </weight>"
        ],
        "args": [
          {
            "name": "delegate",
            "type": "AccountId",
            "type_name": "AccountId"
          },
          {
            "name": "proxy_type",
            "type": "statemint_runtime:ProxyType",
            "type_name": "ProxyType"
          },
          {
            "name": "delay",
            "type": "U32",
            "type_name": "BlockNumber"
          }
        ]
      },
      {
        "lookup": "2a02",
        "name": "remove_proxy",
        "docs": [
          "Unregister a proxy account for the sender.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "Parameters:",
          "- `proxy`: The account that the `caller` would like to remove as a proxy.",
          "- `proxy_type`: The permissions currently enabled for the removed proxy account.",
          "",
          "# <weight>",
          "Weight is a function of the number of proxies the user has (P).",
          "# </weight>"
        ],
        "args": [
          {
            "name": "delegate",
            "type": "AccountId",
            "type_name": "AccountId"
          },
          {
            "name": "proxy_type",
            "type": "statemint_runtime:ProxyType",
            "type_name": "ProxyType"
          },
          {
            "name": "delay",
            "type": "U32",
            "type_name": "BlockNumber"
          }
        ]
      },
      {
        "lookup": "2a03",
        "name": "remove_proxies",
        "docs": [
          "Unregister all proxy accounts for the sender.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "WARNING: This may be called on accounts created by `anonymous`, however if done, then",
          "the unreserved fees will be inaccessible. **All access to this account will be lost.**",
          "",
          "# <weight>",
          "Weight is a function of the number of proxies the user has (P).",
          "# </weight>"
        ],
        "args": null
      },
      {
        "lookup": "2a04",
        "name": "anonymous",
        "docs": [
          "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
          "initialize it with a proxy of `proxy_type` for `origin` sender.",
          "",
          "Requires a `Signed` origin.",
          "",
          "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
          "new account. This will almost always be the most permissive `ProxyType` possible to",
          "allow for maximum flexibility.",
          "- `index`: A disambiguation index, in case this is called multiple times in the same",
          "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
          "want to use `0`.",
          "- `delay`: The announcement period required of the initial proxy. Will generally be",
          "zero.",
          "",
          "Fails with `Duplicate` if this has already been called in this transaction, from the",
          "same sender, with the same parameters.",
          "",
          "Fails if there are insufficient funds to pay for deposit.",
          "",
          "# <weight>",
          "Weight is a function of the number of proxies the user has (P).",
          "# </weight>",
          "TODO: Might be over counting 1 read"
        ],
        "args": [
          {
            "name": "proxy_type",
            "type": "statemint_runtime:ProxyType",
            "type_name": "ProxyType"
          },
          {
            "name": "delay",
            "type": "U32",
            "type_name": "BlockNumber"
          },
          {
            "name": "index",
            "type": "U16",
            "type_name": "u16"
          }
        ]
      },
      {
        "lookup": "2a05",
        "name": "kill_anonymous",
        "docs": [
          "Removes a previously spawned anonymous proxy.",
          "",
          "WARNING: **All access to this account will be lost.** Any funds held in it will be",
          "inaccessible.",
          "",
          "Requires a `Signed` origin, and the sender account must have been created by a call to",
          "`anonymous` with corresponding parameters.",
          "",
          "- `spawner`: The account that originally called `anonymous` to create this account.",
          "- `index`: The disambiguation index originally passed to `anonymous`. Probably `0`.",
          "- `proxy_type`: The proxy type originally passed to `anonymous`.",
          "- `height`: The height of the chain when the call to `anonymous` was processed.",
          "- `ext_index`: The extrinsic index in which the call to `anonymous` was processed.",
          "",
          "Fails with `NoPermission` in case the caller is not a previously created anonymous",
          "account whose `anonymous` call has corresponding parameters.",
          "",
          "# <weight>",
          "Weight is a function of the number of proxies the user has (P).",
          "# </weight>"
        ],
        "args": [
          {
            "name": "spawner",
            "type": "AccountId",
            "type_name": "AccountId"
          },
          {
            "name": "proxy_type",
            "type": "statemint_runtime:ProxyType",
            "type_name": "ProxyType"
          },
          {
            "name": "index",
            "type": "U16",
            "type_name": "u16"
          },
          {
            "name": "height",
            "type": "compact<U32>",
            "type_name": "BlockNumber"
          },
          {
            "name": "ext_index",
            "type": "compact<U32>",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "2a06",
        "name": "announce",
        "docs": [
          "Publish the hash of a proxy-call that will be made in the future.",
          "",
          "This must be called some number of blocks before the corresponding `proxy` is attempted",
          "if the delay associated with the proxy relationship is greater than zero.",
          "",
          "No more than `MaxPending` announcements may be made at any one time.",
          "",
          "This will take a deposit of `AnnouncementDepositFactor` as well as",
          "`AnnouncementDepositBase` if there are no other pending announcements.",
          "",
          "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
          "",
          "Parameters:",
          "- `real`: The account that the proxy will make a call on behalf of.",
          "- `call_hash`: The hash of the call to be made by the `real` account.",
          "",
          "# <weight>",
          "Weight is a function of:",
          "- A: the number of announcements made.",
          "- P: the number of proxies the user has.",
          "# </weight>"
        ],
        "args": [
          {
            "name": "real",
            "type": "AccountId",
            "type_name": "AccountId"
          },
          {
            "name": "call_hash",
            "type": "H256",
            "type_name": "CallHashOf"
          }
        ]
      },
      {
        "lookup": "2a07",
        "name": "remove_announcement",
        "docs": [
          "Remove a given announcement.",
          "",
          "May be called by a proxy account to remove a call they previously announced and return",
          "the deposit.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "Parameters:",
          "- `real`: The account that the proxy will make a call on behalf of.",
          "- `call_hash`: The hash of the call to be made by the `real` account.",
          "",
          "# <weight>",
          "Weight is a function of:",
          "- A: the number of announcements made.",
          "- P: the number of proxies the user has.",
          "# </weight>"
        ],
        "args": [
          {
            "name": "real",
            "type": "AccountId",
            "type_name": "AccountId"
          },
          {
            "name": "call_hash",
            "type": "H256",
            "type_name": "CallHashOf"
          }
        ]
      },
      {
        "lookup": "2a08",
        "name": "reject_announcement",
        "docs": [
          "Remove the given announcement of a delegate.",
          "",
          "May be called by a target (proxied) account to remove a call that one of their delegates",
          "(`delegate`) has announced they want to execute. The deposit is returned.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "Parameters:",
          "- `delegate`: The account that previously announced the call.",
          "- `call_hash`: The hash of the call to be made.",
          "",
          "# <weight>",
          "Weight is a function of:",
          "- A: the number of announcements made.",
          "- P: the number of proxies the user has.",
          "# </weight>"
        ],
        "args": [
          {
            "name": "delegate",
            "type": "AccountId",
            "type_name": "AccountId"
          },
          {
            "name": "call_hash",
            "type": "H256",
            "type_name": "CallHashOf"
          }
        ]
      },
      {
        "lookup": "2a09",
        "name": "proxy_announced",
        "docs": [
          "Dispatch the given `call` from an account that the sender is authorized for through",
          "`add_proxy`.",
          "",
          "Removes any corresponding announcement(s).",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "Parameters:",
          "- `real`: The account that the proxy will make a call on behalf of.",
          "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
          "- `call`: The call to be made by the `real` account.",
          "",
          "# <weight>",
          "Weight is a function of:",
          "- A: the number of announcements made.",
          "- P: the number of proxies the user has.",
          "# </weight>"
        ],
        "args": [
          {
            "name": "delegate",
            "type": "AccountId",
            "type_name": "AccountId"
          },
          {
            "name": "real",
            "type": "AccountId",
            "type_name": "AccountId"
          },
          {
            "name": "force_proxy_type",
            "type": "option<statemint_runtime:ProxyType>",
            "type_name": "Option<ProxyType>"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::Call>"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 248
    },
    "events": [
      {
        "lookup": "2a00",
        "name": "ProxyExecuted",
        "docs": [
          "A proxy was executed correctly, with the given."
        ],
        "args": [
          "Result<NULL,sp_runtime:DispatchError>"
        ],
        "args_name": [
          "result"
        ],
        "args_type_name": [
          "DispatchResult"
        ]
      },
      {
        "lookup": "2a01",
        "name": "AnonymousCreated",
        "docs": [
          "Anonymous account has been created by new proxy with given",
          "disambiguation index and proxy type."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "statemint_runtime:ProxyType",
          "U16"
        ],
        "args_name": [
          "anonymous",
          "who",
          "proxy_type",
          "disambiguation_index"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "ProxyType",
          "u16"
        ]
      },
      {
        "lookup": "2a02",
        "name": "Announced",
        "docs": [
          "An announcement was placed to make a call in the future."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "H256"
        ],
        "args_name": [
          "real",
          "proxy",
          "call_hash"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "CallHashOf"
        ]
      },
      {
        "lookup": "2a03",
        "name": "ProxyAdded",
        "docs": [
          "A proxy was added."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "statemint_runtime:ProxyType",
          "U32"
        ],
        "args_name": [
          "delegator",
          "delegatee",
          "proxy_type",
          "delay"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "ProxyType",
          "BlockNumber"
        ]
      }
    ],
    "events_value": {
      "type": 82
    },
    "constants": [
      {
        "name": "ProxyDepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00227aaa040000000000000000000000",
        "docs": [
          " The base amount of currency needed to reserve for creating a proxy.",
          "",
          " This is held for an additional storage item whose value size is",
          " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
        ]
      },
      {
        "name": "ProxyDepositFactor",
        "type": "U128",
        "type_value": 6,
        "constants_value": "408af701000000000000000000000000",
        "docs": [
          " The amount of currency needed per proxy added.",
          "",
          " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
          " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
          " into account `32 + proxy_type.encode().len()` bytes of data."
        ]
      },
      {
        "name": "MaxProxies",
        "type": "U32",
        "type_value": 4,
        "constants_value": "20000000",
        "docs": [
          " The maximum amount of proxies allowed for a single account."
        ]
      },
      {
        "name": "MaxPending",
        "type": "U32",
        "type_value": 4,
        "constants_value": "20000000",
        "docs": [
          " The maximum amount of time-delayed announcements that are allowed to be pending."
        ]
      },
      {
        "name": "AnnouncementDepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "0034f4aa040000000000000000000000",
        "docs": [
          " The base amount of currency needed to reserve for creating an announcement.",
          "",
          " This is held when a new storage item holding a `Balance` is created (typically 16",
          " bytes)."
        ]
      },
      {
        "name": "AnnouncementDepositFactor",
        "type": "U128",
        "type_value": 6,
        "constants_value": "8014ef03000000000000000000000000",
        "docs": [
          " The amount of currency needed per announcement made.",
          "",
          " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
          " into a pre-existing storage value."
        ]
      }
    ],
    "errors": [
      {
        "name": "TooMany",
        "doc": [
          "There are too many proxies registered or too many announcements pending."
        ]
      },
      {
        "name": "NotFound",
        "doc": [
          "Proxy registration not found."
        ]
      },
      {
        "name": "NotProxy",
        "doc": [
          "Sender is not a proxy of the account to be proxied."
        ]
      },
      {
        "name": "Unproxyable",
        "doc": [
          "A call which is incompatible with the proxy type's filter was attempted."
        ]
      },
      {
        "name": "Duplicate",
        "doc": [
          "Account is already a proxy."
        ]
      },
      {
        "name": "NoPermission",
        "doc": [
          "Call may not be made by proxy because it may escalate its privileges."
        ]
      },
      {
        "name": "Unannounced",
        "doc": [
          "Announcement, if made at all, was made too recently."
        ]
      },
      {
        "name": "NoSelfProxy",
        "doc": [
          "Cannot add self as proxy."
        ]
      }
    ],
    "errors_value": {
      "type": 273
    },
    "index": 42
  },
  {
    "name": "Assets",
    "prefix": "Assets",
    "storage": [
      {
        "name": "Asset",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_assets:types:AssetDetails",
            "keys_id": 4,
            "value_id": 274
          }
        },
        "fallback": "0x00",
        "docs": [
          " Details of an asset."
        ]
      },
      {
        "name": "Account",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "AccountId"
            ],
            "value": "pallet_assets:types:AssetAccount",
            "keys_id": 275,
            "value_id": 276
          }
        },
        "fallback": "0x00",
        "docs": [
          " The holdings of a specific account for a specific asset."
        ]
      },
      {
        "name": "Approvals",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "AccountId",
              "AccountId"
            ],
            "value": "pallet_assets:types:Approval",
            "keys_id": 278,
            "value_id": 279
          }
        },
        "fallback": "0x00",
        "docs": [
          " Approved balance transfers. First balance is the amount approved for transfer. Second",
          " is the amount of `T::Currency` reserved for storing this.",
          " First key is the asset ID, second key is the owner and third key is the delegate."
        ]
      },
      {
        "name": "Metadata",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_assets:types:AssetMetadata",
            "keys_id": 4,
            "value_id": 280
          }
        },
        "fallback": "0x0000000000000000000000000000000000000000",
        "docs": [
          " Metadata of an asset."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "3200",
        "name": "create",
        "docs": [
          "Issue a new class of fungible assets from a public origin.",
          "",
          "This new asset class has no assets initially and its owner is the origin.",
          "",
          "The origin must be Signed and the sender must have sufficient funds free.",
          "",
          "Funds of sender are reserved by `AssetDeposit`.",
          "",
          "Parameters:",
          "- `id`: The identifier of the new asset. This must not be currently in use to identify",
          "an existing asset.",
          "- `admin`: The admin of this class of assets. The admin is the initial address of each",
          "member of the asset class's admin team.",
          "- `min_balance`: The minimum balance of this new asset that any single account must",
          "have. If an account's balance is reduced below this, then it collapses to zero.",
          "",
          "Emits `Created` event when successful.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetId"
          },
          {
            "name": "admin",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          },
          {
            "name": "min_balance",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3201",
        "name": "force_create",
        "docs": [
          "Issue a new class of fungible assets from a privileged origin.",
          "",
          "This new asset class has no assets initially.",
          "",
          "The origin must conform to `ForceOrigin`.",
          "",
          "Unlike `create`, no funds are reserved.",
          "",
          "- `id`: The identifier of the new asset. This must not be currently in use to identify",
          "an existing asset.",
          "- `owner`: The owner of this class of assets. The owner has full superuser permissions",
          "over this asset, but may later change and configure the permissions using",
          "`transfer_ownership` and `set_team`.",
          "- `min_balance`: The minimum balance of this new asset that any single account must",
          "have. If an account's balance is reduced below this, then it collapses to zero.",
          "",
          "Emits `ForceCreated` event when successful.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetId"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          },
          {
            "name": "is_sufficient",
            "type": "Bool",
            "type_name": "bool"
          },
          {
            "name": "min_balance",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3202",
        "name": "destroy",
        "docs": [
          "Destroy a class of fungible assets.",
          "",
          "The origin must conform to `ForceOrigin` or must be Signed and the sender must be the",
          "owner of the asset `id`.",
          "",
          "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
          "asset.",
          "",
          "Emits `Destroyed` event when successful.",
          "",
          "NOTE: It can be helpful to first freeze an asset before destroying it so that you",
          "can provide accurate witness information and prevent users from manipulating state",
          "in a way that can make it harder to destroy.",
          "",
          "Weight: `O(c + p + a)` where:",
          "- `c = (witness.accounts - witness.sufficients)`",
          "- `s = witness.sufficients`",
          "- `a = witness.approvals`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetId"
          },
          {
            "name": "witness",
            "type": "pallet_assets:types:DestroyWitness",
            "type_name": "DestroyWitness"
          }
        ]
      },
      {
        "lookup": "3203",
        "name": "mint",
        "docs": [
          "Mint assets of a particular class.",
          "",
          "The origin must be Signed and the sender must be the Issuer of the asset `id`.",
          "",
          "- `id`: The identifier of the asset to have some amount minted.",
          "- `beneficiary`: The account to be credited with the minted assets.",
          "- `amount`: The amount of the asset to be minted.",
          "",
          "Emits `Issued` event when successful.",
          "",
          "Weight: `O(1)`",
          "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetId"
          },
          {
            "name": "beneficiary",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3204",
        "name": "burn",
        "docs": [
          "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.",
          "",
          "Origin must be Signed and the sender should be the Manager of the asset `id`.",
          "",
          "Bails with `NoAccount` if the `who` is already dead.",
          "",
          "- `id`: The identifier of the asset to have some amount burned.",
          "- `who`: The account to be debited from.",
          "- `amount`: The maximum amount by which `who`'s balance should be reduced.",
          "",
          "Emits `Burned` with the actual amount burned. If this takes the balance to below the",
          "minimum for the asset, then the amount burned is increased to take it to zero.",
          "",
          "Weight: `O(1)`",
          "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetId"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3205",
        "name": "transfer",
        "docs": [
          "Move some assets from the sender account to another.",
          "",
          "Origin must be Signed.",
          "",
          "- `id`: The identifier of the asset to have some amount transferred.",
          "- `target`: The account to be credited.",
          "- `amount`: The amount by which the sender's balance of assets should be reduced and",
          "`target`'s balance increased. The amount actually transferred may be slightly greater in",
          "the case that the transfer would otherwise take the sender balance above zero but below",
          "the minimum balance. Must be greater than zero.",
          "",
          "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
          "to below the minimum for the asset, then the amount transferred is increased to take it",
          "to zero.",
          "",
          "Weight: `O(1)`",
          "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
          "`target`."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetId"
          },
          {
            "name": "target",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3206",
        "name": "transfer_keep_alive",
        "docs": [
          "Move some assets from the sender account to another, keeping the sender account alive.",
          "",
          "Origin must be Signed.",
          "",
          "- `id`: The identifier of the asset to have some amount transferred.",
          "- `target`: The account to be credited.",
          "- `amount`: The amount by which the sender's balance of assets should be reduced and",
          "`target`'s balance increased. The amount actually transferred may be slightly greater in",
          "the case that the transfer would otherwise take the sender balance above zero but below",
          "the minimum balance. Must be greater than zero.",
          "",
          "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
          "to below the minimum for the asset, then the amount transferred is increased to take it",
          "to zero.",
          "",
          "Weight: `O(1)`",
          "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
          "`target`."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetId"
          },
          {
            "name": "target",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3207",
        "name": "force_transfer",
        "docs": [
          "Move some assets from one account to another.",
          "",
          "Origin must be Signed and the sender should be the Admin of the asset `id`.",
          "",
          "- `id`: The identifier of the asset to have some amount transferred.",
          "- `source`: The account to be debited.",
          "- `dest`: The account to be credited.",
          "- `amount`: The amount by which the `source`'s balance of assets should be reduced and",
          "`dest`'s balance increased. The amount actually transferred may be slightly greater in",
          "the case that the transfer would otherwise take the `source` balance above zero but",
          "below the minimum balance. Must be greater than zero.",
          "",
          "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
          "to below the minimum for the asset, then the amount transferred is increased to take it",
          "to zero.",
          "",
          "Weight: `O(1)`",
          "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of",
          "`dest`."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetId"
          },
          {
            "name": "source",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          },
          {
            "name": "dest",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3208",
        "name": "freeze",
        "docs": [
          "Disallow further unprivileged transfers from an account.",
          "",
          "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
          "",
          "- `id`: The identifier of the asset to be frozen.",
          "- `who`: The account to be frozen.",
          "",
          "Emits `Frozen`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetId"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          }
        ]
      },
      {
        "lookup": "3209",
        "name": "thaw",
        "docs": [
          "Allow unprivileged transfers from an account again.",
          "",
          "Origin must be Signed and the sender should be the Admin of the asset `id`.",
          "",
          "- `id`: The identifier of the asset to be frozen.",
          "- `who`: The account to be unfrozen.",
          "",
          "Emits `Thawed`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetId"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          }
        ]
      },
      {
        "lookup": "320a",
        "name": "freeze_asset",
        "docs": [
          "Disallow further unprivileged transfers for the asset class.",
          "",
          "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
          "",
          "- `id`: The identifier of the asset to be frozen.",
          "",
          "Emits `Frozen`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetId"
          }
        ]
      },
      {
        "lookup": "320b",
        "name": "thaw_asset",
        "docs": [
          "Allow unprivileged transfers for the asset again.",
          "",
          "Origin must be Signed and the sender should be the Admin of the asset `id`.",
          "",
          "- `id`: The identifier of the asset to be thawed.",
          "",
          "Emits `Thawed`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetId"
          }
        ]
      },
      {
        "lookup": "320c",
        "name": "transfer_ownership",
        "docs": [
          "Change the Owner of an asset.",
          "",
          "Origin must be Signed and the sender should be the Owner of the asset `id`.",
          "",
          "- `id`: The identifier of the asset.",
          "- `owner`: The new Owner of this asset.",
          "",
          "Emits `OwnerChanged`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetId"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          }
        ]
      },
      {
        "lookup": "320d",
        "name": "set_team",
        "docs": [
          "Change the Issuer, Admin and Freezer of an asset.",
          "",
          "Origin must be Signed and the sender should be the Owner of the asset `id`.",
          "",
          "- `id`: The identifier of the asset to be frozen.",
          "- `issuer`: The new Issuer of this asset.",
          "- `admin`: The new Admin of this asset.",
          "- `freezer`: The new Freezer of this asset.",
          "",
          "Emits `TeamChanged`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetId"
          },
          {
            "name": "issuer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          },
          {
            "name": "admin",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          },
          {
            "name": "freezer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          }
        ]
      },
      {
        "lookup": "320e",
        "name": "set_metadata",
        "docs": [
          "Set the metadata for an asset.",
          "",
          "Origin must be Signed and the sender should be the Owner of the asset `id`.",
          "",
          "Funds of sender are reserved according to the formula:",
          "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into",
          "account any already reserved funds.",
          "",
          "- `id`: The identifier of the asset to update.",
          "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
          "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
          "- `decimals`: The number of decimals this asset uses to represent one unit.",
          "",
          "Emits `MetadataSet`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetId"
          },
          {
            "name": "name",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "symbol",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "decimals",
            "type": "U8",
            "type_name": "u8"
          }
        ]
      },
      {
        "lookup": "320f",
        "name": "clear_metadata",
        "docs": [
          "Clear the metadata for an asset.",
          "",
          "Origin must be Signed and the sender should be the Owner of the asset `id`.",
          "",
          "Any deposit is freed for the asset owner.",
          "",
          "- `id`: The identifier of the asset to clear.",
          "",
          "Emits `MetadataCleared`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetId"
          }
        ]
      },
      {
        "lookup": "3210",
        "name": "force_set_metadata",
        "docs": [
          "Force the metadata for an asset to some value.",
          "",
          "Origin must be ForceOrigin.",
          "",
          "Any deposit is left alone.",
          "",
          "- `id`: The identifier of the asset to update.",
          "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
          "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
          "- `decimals`: The number of decimals this asset uses to represent one unit.",
          "",
          "Emits `MetadataSet`.",
          "",
          "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetId"
          },
          {
            "name": "name",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "symbol",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "decimals",
            "type": "U8",
            "type_name": "u8"
          },
          {
            "name": "is_frozen",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "3211",
        "name": "force_clear_metadata",
        "docs": [
          "Clear the metadata for an asset.",
          "",
          "Origin must be ForceOrigin.",
          "",
          "Any deposit is returned.",
          "",
          "- `id`: The identifier of the asset to clear.",
          "",
          "Emits `MetadataCleared`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetId"
          }
        ]
      },
      {
        "lookup": "3212",
        "name": "force_asset_status",
        "docs": [
          "Alter the attributes of a given asset.",
          "",
          "Origin must be `ForceOrigin`.",
          "",
          "- `id`: The identifier of the asset.",
          "- `owner`: The new Owner of this asset.",
          "- `issuer`: The new Issuer of this asset.",
          "- `admin`: The new Admin of this asset.",
          "- `freezer`: The new Freezer of this asset.",
          "- `min_balance`: The minimum balance of this new asset that any single account must",
          "have. If an account's balance is reduced below this, then it collapses to zero.",
          "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient",
          "value to account for the state bloat associated with its balance storage. If set to",
          "`true`, then non-zero balances may be stored without a `consumer` reference (and thus",
          "an ED in the Balances pallet or whatever else is used to control user-account state",
          "growth).",
          "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin",
          "instructions.",
          "",
          "Emits `AssetStatusChanged` with the identity of the asset.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetId"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          },
          {
            "name": "issuer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          },
          {
            "name": "admin",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          },
          {
            "name": "freezer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          },
          {
            "name": "min_balance",
            "type": "compact<U128>",
            "type_name": "Balance"
          },
          {
            "name": "is_sufficient",
            "type": "Bool",
            "type_name": "bool"
          },
          {
            "name": "is_frozen",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "3213",
        "name": "approve_transfer",
        "docs": [
          "Approve an amount of asset for transfer by a delegated third-party account.",
          "",
          "Origin must be Signed.",
          "",
          "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account",
          "for the purpose of holding the approval. If some non-zero amount of assets is already",
          "approved from signing account to `delegate`, then it is topped up or unreserved to",
          "meet the right value.",
          "",
          "NOTE: The signing account does not need to own `amount` of assets at the point of",
          "making this call.",
          "",
          "- `id`: The identifier of the asset.",
          "- `delegate`: The account to delegate permission to transfer asset.",
          "- `amount`: The amount of asset that may be transferred by `delegate`. If there is",
          "already an approval in place, then this acts additively.",
          "",
          "Emits `ApprovedTransfer` on success.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetId"
          },
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3214",
        "name": "cancel_approval",
        "docs": [
          "Cancel all of some asset approved for delegated transfer by a third-party account.",
          "",
          "Origin must be Signed and there must be an approval in place between signer and",
          "`delegate`.",
          "",
          "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
          "",
          "- `id`: The identifier of the asset.",
          "- `delegate`: The account delegated permission to transfer asset.",
          "",
          "Emits `ApprovalCancelled` on success.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetId"
          },
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          }
        ]
      },
      {
        "lookup": "3215",
        "name": "force_cancel_approval",
        "docs": [
          "Cancel all of some asset approved for delegated transfer by a third-party account.",
          "",
          "Origin must be either ForceOrigin or Signed origin with the signer being the Admin",
          "account of the asset `id`.",
          "",
          "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
          "",
          "- `id`: The identifier of the asset.",
          "- `delegate`: The account delegated permission to transfer asset.",
          "",
          "Emits `ApprovalCancelled` on success.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetId"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          },
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          }
        ]
      },
      {
        "lookup": "3216",
        "name": "transfer_approved",
        "docs": [
          "Transfer some asset balance from a previously delegated account to some third-party",
          "account.",
          "",
          "Origin must be Signed and there must be an approval in place by the `owner` to the",
          "signer.",
          "",
          "If the entire amount approved for transfer is transferred, then any deposit previously",
          "reserved by `approve_transfer` is unreserved.",
          "",
          "- `id`: The identifier of the asset.",
          "- `owner`: The account which previously approved for a transfer of at least `amount` and",
          "from which the asset balance will be withdrawn.",
          "- `destination`: The account to which the asset balance of `amount` will be transferred.",
          "- `amount`: The amount of assets to transfer.",
          "",
          "Emits `TransferredApproved` on success.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetId"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          },
          {
            "name": "destination",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3217",
        "name": "touch",
        "docs": [
          "Create an asset account for non-provider assets.",
          "",
          "A deposit will be taken from the signer account.",
          "",
          "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit",
          "  to be taken.",
          "- `id`: The identifier of the asset for the account to be created.",
          "",
          "Emits `Touched` event when successful."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetId"
          }
        ]
      },
      {
        "lookup": "3218",
        "name": "refund",
        "docs": [
          "Return the deposit (if any) of an asset account.",
          "",
          "The origin must be Signed.",
          "",
          "- `id`: The identifier of the asset for the account to be created.",
          "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.",
          "",
          "Emits `Refunded` event when successful."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetId"
          },
          {
            "name": "allow_burn",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 250
    },
    "events": [
      {
        "lookup": "3200",
        "name": "Created",
        "docs": [
          "Some asset class was created."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "creator",
          "owner"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3201",
        "name": "Issued",
        "docs": [
          "Some assets were issued."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "owner",
          "total_supply"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3202",
        "name": "Transferred",
        "docs": [
          "Some assets were transferred."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "from",
          "to",
          "amount"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3203",
        "name": "Burned",
        "docs": [
          "Some assets were destroyed."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "owner",
          "balance"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3204",
        "name": "TeamChanged",
        "docs": [
          "The management team changed."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "issuer",
          "admin",
          "freezer"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3205",
        "name": "OwnerChanged",
        "docs": [
          "The owner changed."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "owner"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "3206",
        "name": "Frozen",
        "docs": [
          "Some account `who` was frozen."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "who"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "3207",
        "name": "Thawed",
        "docs": [
          "Some account `who` was thawed."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "who"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "3208",
        "name": "AssetFrozen",
        "docs": [
          "Some asset `asset_id` was frozen."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "3209",
        "name": "AssetThawed",
        "docs": [
          "Some asset `asset_id` was thawed."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "320a",
        "name": "Destroyed",
        "docs": [
          "An asset class was destroyed."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "320b",
        "name": "ForceCreated",
        "docs": [
          "Some asset class was force-created."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "owner"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "320c",
        "name": "MetadataSet",
        "docs": [
          "New metadata has been set for an asset."
        ],
        "args": [
          "U32",
          "Vec<U8>",
          "Vec<U8>",
          "U8",
          "Bool"
        ],
        "args_name": [
          "asset_id",
          "name",
          "symbol",
          "decimals",
          "is_frozen"
        ],
        "args_type_name": [
          "AssetId",
          "Bytes",
          "Bytes",
          "u8",
          "bool"
        ]
      },
      {
        "lookup": "320d",
        "name": "MetadataCleared",
        "docs": [
          "Metadata has been cleared for an asset."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "320e",
        "name": "ApprovedTransfer",
        "docs": [
          "(Additional) funds have been approved for transfer to a destination account."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "source",
          "delegate",
          "amount"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "320f",
        "name": "ApprovalCancelled",
        "docs": [
          "An approval for account `delegate` was cancelled by `owner`."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "owner",
          "delegate"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3210",
        "name": "TransferredApproved",
        "docs": [
          "An `amount` was transferred in its entirety from `owner` to `destination` by",
          "the approved `delegate`."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "owner",
          "delegate",
          "destination",
          "amount"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3211",
        "name": "AssetStatusChanged",
        "docs": [
          "An asset has had its attributes changed by the `Force` origin."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      }
    ],
    "events_value": {
      "type": 85
    },
    "constants": [
      {
        "name": "AssetDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "0010a5d4e80000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved for an asset."
        ]
      },
      {
        "name": "AssetAccountDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00ec0ba9040000000000000000000000",
        "docs": [
          " The amount of funds that must be reserved for a non-provider asset account to be",
          " maintained."
        ]
      },
      {
        "name": "MetadataDepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "006125ac040000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved when adding metadata to your asset."
        ]
      },
      {
        "name": "MetadataDepositPerByte",
        "type": "U128",
        "type_value": 6,
        "constants_value": "40420f00000000000000000000000000",
        "docs": [
          " The additional funds that must be reserved for the number of bytes you store in your",
          " metadata."
        ]
      },
      {
        "name": "ApprovalDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00ca9a3b000000000000000000000000",
        "docs": [
          " The amount of funds that must be reserved when creating a new approval."
        ]
      },
      {
        "name": "StringLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "32000000",
        "docs": [
          " The maximum length of a name or symbol stored on-chain."
        ]
      }
    ],
    "errors": [
      {
        "name": "BalanceLow",
        "doc": [
          "Account balance must be greater than or equal to the transfer amount."
        ]
      },
      {
        "name": "NoAccount",
        "doc": [
          "The account to alter does not exist."
        ]
      },
      {
        "name": "NoPermission",
        "doc": [
          "The signing account has no permission to do the operation."
        ]
      },
      {
        "name": "Unknown",
        "doc": [
          "The given asset ID is unknown."
        ]
      },
      {
        "name": "Frozen",
        "doc": [
          "The origin account is frozen."
        ]
      },
      {
        "name": "InUse",
        "doc": [
          "The asset ID is already taken."
        ]
      },
      {
        "name": "BadWitness",
        "doc": [
          "Invalid witness data given."
        ]
      },
      {
        "name": "MinBalanceZero",
        "doc": [
          "Minimum balance should be non-zero."
        ]
      },
      {
        "name": "NoProvider",
        "doc": [
          "Unable to increment the consumer reference counters on the account. Either no provider",
          "reference exists to allow a non-zero balance of a non-self-sufficient asset, or the",
          "maximum number of consumers has been reached."
        ]
      },
      {
        "name": "BadMetadata",
        "doc": [
          "Invalid metadata given."
        ]
      },
      {
        "name": "Unapproved",
        "doc": [
          "No approval exists that would allow the transfer."
        ]
      },
      {
        "name": "WouldDie",
        "doc": [
          "The source account would not survive the transfer and it needs to stay alive."
        ]
      },
      {
        "name": "AlreadyExists",
        "doc": [
          "The asset-account already exists."
        ]
      },
      {
        "name": "NoDeposit",
        "doc": [
          "The asset-account doesn't have an associated deposit."
        ]
      },
      {
        "name": "WouldBurn",
        "doc": [
          "The operation would result in funds being burned."
        ]
      }
    ],
    "errors_value": {
      "type": 282
    },
    "index": 50
  },
  {
    "name": "Uniques",
    "prefix": "Uniques",
    "storage": [
      {
        "name": "Class",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_uniques:types:ClassDetails",
            "keys_id": 4,
            "value_id": 283
          }
        },
        "fallback": "0x00",
        "docs": [
          " Details of an asset class."
        ]
      },
      {
        "name": "Account",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId",
              "U32",
              "U32"
            ],
            "value": "NULL",
            "keys_id": 284,
            "value_id": 79
          }
        },
        "fallback": "0x00",
        "docs": [
          " The assets held by any given account; set out this way so that assets owned by a single",
          " account can be enumerated."
        ]
      },
      {
        "name": "ClassAccount",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId",
              "U32"
            ],
            "value": "NULL",
            "keys_id": 285,
            "value_id": 79
          }
        },
        "fallback": "0x00",
        "docs": [
          " The classes owned by any given account; set out this way so that classes owned by a single",
          " account can be enumerated."
        ]
      },
      {
        "name": "Asset",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "U32"
            ],
            "value": "pallet_uniques:types:InstanceDetails",
            "keys_id": 96,
            "value_id": 286
          }
        },
        "fallback": "0x00",
        "docs": [
          " The assets in existence and their ownership details."
        ]
      },
      {
        "name": "ClassMetadataOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_uniques:types:ClassMetadata",
            "keys_id": 4,
            "value_id": 287
          }
        },
        "fallback": "0x00",
        "docs": [
          " Metadata of an asset class."
        ]
      },
      {
        "name": "InstanceMetadataOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "U32"
            ],
            "value": "pallet_uniques:types:InstanceMetadata",
            "keys_id": 96,
            "value_id": 288
          }
        },
        "fallback": "0x00",
        "docs": [
          " Metadata of an asset instance."
        ]
      },
      {
        "name": "Attribute",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "option<U32>",
              "Vec<U8>"
            ],
            "value": "Tuple:Vec<U8>U128",
            "keys_id": 289,
            "value_id": 290
          }
        },
        "fallback": "0x00",
        "docs": [
          " Metadata of an asset class."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "3300",
        "name": "create",
        "docs": [
          "Issue a new class of non-fungible assets from a public origin.",
          "",
          "This new asset class has no assets initially and its owner is the origin.",
          "",
          "The origin must be Signed and the sender must have sufficient funds free.",
          "",
          "`AssetDeposit` funds of sender are reserved.",
          "",
          "Parameters:",
          "- `class`: The identifier of the new asset class. This must not be currently in use.",
          "- `admin`: The admin of this class of assets. The admin is the initial address of each",
          "member of the asset class's admin team.",
          "",
          "Emits `Created` event when successful.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "class",
            "type": "compact<U32>",
            "type_name": "ClassId"
          },
          {
            "name": "admin",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          }
        ]
      },
      {
        "lookup": "3301",
        "name": "force_create",
        "docs": [
          "Issue a new class of non-fungible assets from a privileged origin.",
          "",
          "This new asset class has no assets initially.",
          "",
          "The origin must conform to `ForceOrigin`.",
          "",
          "Unlike `create`, no funds are reserved.",
          "",
          "- `class`: The identifier of the new asset. This must not be currently in use.",
          "- `owner`: The owner of this class of assets. The owner has full superuser permissions",
          "over this asset, but may later change and configure the permissions using",
          "`transfer_ownership` and `set_team`.",
          "",
          "Emits `ForceCreated` event when successful.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "class",
            "type": "compact<U32>",
            "type_name": "ClassId"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          },
          {
            "name": "free_holding",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "3302",
        "name": "destroy",
        "docs": [
          "Destroy a class of fungible assets.",
          "",
          "The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the",
          "owner of the asset `class`.",
          "",
          "- `class`: The identifier of the asset class to be destroyed.",
          "- `witness`: Information on the instances minted in the asset class. This must be",
          "correct.",
          "",
          "Emits `Destroyed` event when successful.",
          "",
          "Weight: `O(n + m)` where:",
          "- `n = witness.instances`",
          "- `m = witness.instance_metadatas`",
          "- `a = witness.attributes`"
        ],
        "args": [
          {
            "name": "class",
            "type": "compact<U32>",
            "type_name": "ClassId"
          },
          {
            "name": "witness",
            "type": "pallet_uniques:types:DestroyWitness",
            "type_name": "DestroyWitness"
          }
        ]
      },
      {
        "lookup": "3303",
        "name": "mint",
        "docs": [
          "Mint an asset instance of a particular class.",
          "",
          "The origin must be Signed and the sender must be the Issuer of the asset `class`.",
          "",
          "- `class`: The class of the asset to be minted.",
          "- `instance`: The instance value of the asset to be minted.",
          "- `beneficiary`: The initial owner of the minted asset.",
          "",
          "Emits `Issued` event when successful.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "class",
            "type": "compact<U32>",
            "type_name": "ClassId"
          },
          {
            "name": "instance",
            "type": "compact<U32>",
            "type_name": "InstanceId"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          }
        ]
      },
      {
        "lookup": "3304",
        "name": "burn",
        "docs": [
          "Destroy a single asset instance.",
          "",
          "Origin must be Signed and the sender should be the Admin of the asset `class`.",
          "",
          "- `class`: The class of the asset to be burned.",
          "- `instance`: The instance of the asset to be burned.",
          "- `check_owner`: If `Some` then the operation will fail with `WrongOwner` unless the",
          "  asset is owned by this value.",
          "",
          "Emits `Burned` with the actual amount burned.",
          "",
          "Weight: `O(1)`",
          "Modes: `check_owner.is_some()`."
        ],
        "args": [
          {
            "name": "class",
            "type": "compact<U32>",
            "type_name": "ClassId"
          },
          {
            "name": "instance",
            "type": "compact<U32>",
            "type_name": "InstanceId"
          },
          {
            "name": "check_owner",
            "type": "option<sp_runtime:multiaddress:MultiAddress>",
            "type_name": "Option<<Lookup as StaticLookup>::Source>"
          }
        ]
      },
      {
        "lookup": "3305",
        "name": "transfer",
        "docs": [
          "Move an asset from the sender account to another.",
          "",
          "Origin must be Signed and the signing account must be either:",
          "- the Admin of the asset `class`;",
          "- the Owner of the asset `instance`;",
          "- the approved delegate for the asset `instance` (in this case, the approval is reset).",
          "",
          "Arguments:",
          "- `class`: The class of the asset to be transferred.",
          "- `instance`: The instance of the asset to be transferred.",
          "- `dest`: The account to receive ownership of the asset.",
          "",
          "Emits `Transferred`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "class",
            "type": "compact<U32>",
            "type_name": "ClassId"
          },
          {
            "name": "instance",
            "type": "compact<U32>",
            "type_name": "InstanceId"
          },
          {
            "name": "dest",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          }
        ]
      },
      {
        "lookup": "3306",
        "name": "redeposit",
        "docs": [
          "Reevaluate the deposits on some assets.",
          "",
          "Origin must be Signed and the sender should be the Owner of the asset `class`.",
          "",
          "- `class`: The class of the asset to be frozen.",
          "- `instances`: The instances of the asset class whose deposits will be reevaluated.",
          "",
          "NOTE: This exists as a best-effort function. Any asset instances which are unknown or",
          "in the case that the owner account does not have reservable funds to pay for a",
          "deposit increase are ignored. Generally the owner isn't going to call this on instances",
          "whose existing deposit is less than the refreshed deposit as it would only cost them,",
          "so it's of little consequence.",
          "",
          "It will still return an error in the case that the class is unknown of the signer is",
          "not permitted to call it.",
          "",
          "Weight: `O(instances.len())`"
        ],
        "args": [
          {
            "name": "class",
            "type": "compact<U32>",
            "type_name": "ClassId"
          },
          {
            "name": "instances",
            "type": "Vec<U32>",
            "type_name": "Vec<InstanceId>"
          }
        ]
      },
      {
        "lookup": "3307",
        "name": "freeze",
        "docs": [
          "Disallow further unprivileged transfer of an asset instance.",
          "",
          "Origin must be Signed and the sender should be the Freezer of the asset `class`.",
          "",
          "- `class`: The class of the asset to be frozen.",
          "- `instance`: The instance of the asset to be frozen.",
          "",
          "Emits `Frozen`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "class",
            "type": "compact<U32>",
            "type_name": "ClassId"
          },
          {
            "name": "instance",
            "type": "compact<U32>",
            "type_name": "InstanceId"
          }
        ]
      },
      {
        "lookup": "3308",
        "name": "thaw",
        "docs": [
          "Re-allow unprivileged transfer of an asset instance.",
          "",
          "Origin must be Signed and the sender should be the Freezer of the asset `class`.",
          "",
          "- `class`: The class of the asset to be thawed.",
          "- `instance`: The instance of the asset to be thawed.",
          "",
          "Emits `Thawed`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "class",
            "type": "compact<U32>",
            "type_name": "ClassId"
          },
          {
            "name": "instance",
            "type": "compact<U32>",
            "type_name": "InstanceId"
          }
        ]
      },
      {
        "lookup": "3309",
        "name": "freeze_class",
        "docs": [
          "Disallow further unprivileged transfers for a whole asset class.",
          "",
          "Origin must be Signed and the sender should be the Freezer of the asset `class`.",
          "",
          "- `class`: The asset class to be frozen.",
          "",
          "Emits `ClassFrozen`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "class",
            "type": "compact<U32>",
            "type_name": "ClassId"
          }
        ]
      },
      {
        "lookup": "330a",
        "name": "thaw_class",
        "docs": [
          "Re-allow unprivileged transfers for a whole asset class.",
          "",
          "Origin must be Signed and the sender should be the Admin of the asset `class`.",
          "",
          "- `class`: The class to be thawed.",
          "",
          "Emits `ClassThawed`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "class",
            "type": "compact<U32>",
            "type_name": "ClassId"
          }
        ]
      },
      {
        "lookup": "330b",
        "name": "transfer_ownership",
        "docs": [
          "Change the Owner of an asset class.",
          "",
          "Origin must be Signed and the sender should be the Owner of the asset `class`.",
          "",
          "- `class`: The asset class whose owner should be changed.",
          "- `owner`: The new Owner of this asset class.",
          "",
          "Emits `OwnerChanged`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "class",
            "type": "compact<U32>",
            "type_name": "ClassId"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          }
        ]
      },
      {
        "lookup": "330c",
        "name": "set_team",
        "docs": [
          "Change the Issuer, Admin and Freezer of an asset class.",
          "",
          "Origin must be Signed and the sender should be the Owner of the asset `class`.",
          "",
          "- `class`: The asset class whose team should be changed.",
          "- `issuer`: The new Issuer of this asset class.",
          "- `admin`: The new Admin of this asset class.",
          "- `freezer`: The new Freezer of this asset class.",
          "",
          "Emits `TeamChanged`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "class",
            "type": "compact<U32>",
            "type_name": "ClassId"
          },
          {
            "name": "issuer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          },
          {
            "name": "admin",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          },
          {
            "name": "freezer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          }
        ]
      },
      {
        "lookup": "330d",
        "name": "approve_transfer",
        "docs": [
          "Approve an instance to be transferred by a delegated third-party account.",
          "",
          "Origin must be Signed and must be the owner of the asset `instance`.",
          "",
          "- `class`: The class of the asset to be approved for delegated transfer.",
          "- `instance`: The instance of the asset to be approved for delegated transfer.",
          "- `delegate`: The account to delegate permission to transfer the asset.",
          "",
          "Emits `ApprovedTransfer` on success.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "class",
            "type": "compact<U32>",
            "type_name": "ClassId"
          },
          {
            "name": "instance",
            "type": "compact<U32>",
            "type_name": "InstanceId"
          },
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          }
        ]
      },
      {
        "lookup": "330e",
        "name": "cancel_approval",
        "docs": [
          "Cancel the prior approval for the transfer of an asset by a delegate.",
          "",
          "Origin must be either:",
          "- the `Force` origin;",
          "- `Signed` with the signer being the Admin of the asset `class`;",
          "- `Signed` with the signer being the Owner of the asset `instance`;",
          "",
          "Arguments:",
          "- `class`: The class of the asset of whose approval will be cancelled.",
          "- `instance`: The instance of the asset of whose approval will be cancelled.",
          "- `maybe_check_delegate`: If `Some` will ensure that the given account is the one to",
          "  which permission of transfer is delegated.",
          "",
          "Emits `ApprovalCancelled` on success.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "class",
            "type": "compact<U32>",
            "type_name": "ClassId"
          },
          {
            "name": "instance",
            "type": "compact<U32>",
            "type_name": "InstanceId"
          },
          {
            "name": "maybe_check_delegate",
            "type": "option<sp_runtime:multiaddress:MultiAddress>",
            "type_name": "Option<<Lookup as StaticLookup>::Source>"
          }
        ]
      },
      {
        "lookup": "330f",
        "name": "force_asset_status",
        "docs": [
          "Alter the attributes of a given asset.",
          "",
          "Origin must be `ForceOrigin`.",
          "",
          "- `class`: The identifier of the asset.",
          "- `owner`: The new Owner of this asset.",
          "- `issuer`: The new Issuer of this asset.",
          "- `admin`: The new Admin of this asset.",
          "- `freezer`: The new Freezer of this asset.",
          "- `free_holding`: Whether a deposit is taken for holding an instance of this asset",
          "  class.",
          "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin",
          "instructions.",
          "",
          "Emits `AssetStatusChanged` with the identity of the asset.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "class",
            "type": "compact<U32>",
            "type_name": "ClassId"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          },
          {
            "name": "issuer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          },
          {
            "name": "admin",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          },
          {
            "name": "freezer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          },
          {
            "name": "free_holding",
            "type": "Bool",
            "type_name": "bool"
          },
          {
            "name": "is_frozen",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "3310",
        "name": "set_attribute",
        "docs": [
          "Set an attribute for an asset class or instance.",
          "",
          "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
          "asset `class`.",
          "",
          "If the origin is Signed, then funds of signer are reserved according to the formula:",
          "`MetadataDepositBase + DepositPerByte * (key.len + value.len)` taking into",
          "account any already reserved funds.",
          "",
          "- `class`: The identifier of the asset class whose instance's metadata to set.",
          "- `maybe_instance`: The identifier of the asset instance whose metadata to set.",
          "- `key`: The key of the attribute.",
          "- `value`: The value to which to set the attribute.",
          "",
          "Emits `AttributeSet`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "class",
            "type": "compact<U32>",
            "type_name": "ClassId"
          },
          {
            "name": "maybe_instance",
            "type": "option<U32>",
            "type_name": "Option<InstanceId>"
          },
          {
            "name": "key",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, KeyLimit>"
          },
          {
            "name": "value",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, ValueLimit>"
          }
        ]
      },
      {
        "lookup": "3311",
        "name": "clear_attribute",
        "docs": [
          "Clear an attribute for an asset class or instance.",
          "",
          "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
          "asset `class`.",
          "",
          "Any deposit is freed for the asset class owner.",
          "",
          "- `class`: The identifier of the asset class whose instance's metadata to clear.",
          "- `maybe_instance`: The identifier of the asset instance whose metadata to clear.",
          "- `key`: The key of the attribute.",
          "",
          "Emits `AttributeCleared`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "class",
            "type": "compact<U32>",
            "type_name": "ClassId"
          },
          {
            "name": "maybe_instance",
            "type": "option<U32>",
            "type_name": "Option<InstanceId>"
          },
          {
            "name": "key",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, KeyLimit>"
          }
        ]
      },
      {
        "lookup": "3312",
        "name": "set_metadata",
        "docs": [
          "Set the metadata for an asset instance.",
          "",
          "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
          "asset `class`.",
          "",
          "If the origin is Signed, then funds of signer are reserved according to the formula:",
          "`MetadataDepositBase + DepositPerByte * data.len` taking into",
          "account any already reserved funds.",
          "",
          "- `class`: The identifier of the asset class whose instance's metadata to set.",
          "- `instance`: The identifier of the asset instance whose metadata to set.",
          "- `data`: The general information of this asset. Limited in length by `StringLimit`.",
          "- `is_frozen`: Whether the metadata should be frozen against further changes.",
          "",
          "Emits `MetadataSet`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "class",
            "type": "compact<U32>",
            "type_name": "ClassId"
          },
          {
            "name": "instance",
            "type": "compact<U32>",
            "type_name": "InstanceId"
          },
          {
            "name": "data",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, StringLimit>"
          },
          {
            "name": "is_frozen",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "3313",
        "name": "clear_metadata",
        "docs": [
          "Clear the metadata for an asset instance.",
          "",
          "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
          "asset `instance`.",
          "",
          "Any deposit is freed for the asset class owner.",
          "",
          "- `class`: The identifier of the asset class whose instance's metadata to clear.",
          "- `instance`: The identifier of the asset instance whose metadata to clear.",
          "",
          "Emits `MetadataCleared`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "class",
            "type": "compact<U32>",
            "type_name": "ClassId"
          },
          {
            "name": "instance",
            "type": "compact<U32>",
            "type_name": "InstanceId"
          }
        ]
      },
      {
        "lookup": "3314",
        "name": "set_class_metadata",
        "docs": [
          "Set the metadata for an asset class.",
          "",
          "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of",
          "the asset `class`.",
          "",
          "If the origin is `Signed`, then funds of signer are reserved according to the formula:",
          "`MetadataDepositBase + DepositPerByte * data.len` taking into",
          "account any already reserved funds.",
          "",
          "- `class`: The identifier of the asset whose metadata to update.",
          "- `data`: The general information of this asset. Limited in length by `StringLimit`.",
          "- `is_frozen`: Whether the metadata should be frozen against further changes.",
          "",
          "Emits `ClassMetadataSet`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "class",
            "type": "compact<U32>",
            "type_name": "ClassId"
          },
          {
            "name": "data",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, StringLimit>"
          },
          {
            "name": "is_frozen",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "3315",
        "name": "clear_class_metadata",
        "docs": [
          "Clear the metadata for an asset class.",
          "",
          "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of",
          "the asset `class`.",
          "",
          "Any deposit is freed for the asset class owner.",
          "",
          "- `class`: The identifier of the asset class whose metadata to clear.",
          "",
          "Emits `ClassMetadataCleared`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "class",
            "type": "compact<U32>",
            "type_name": "ClassId"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 252
    },
    "events": [
      {
        "lookup": "3300",
        "name": "Created",
        "docs": [
          "An asset class was created."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "class",
          "creator",
          "owner"
        ],
        "args_type_name": [
          "ClassId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3301",
        "name": "ForceCreated",
        "docs": [
          "An asset class was force-created."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "class",
          "owner"
        ],
        "args_type_name": [
          "ClassId",
          "AccountId"
        ]
      },
      {
        "lookup": "3302",
        "name": "Destroyed",
        "docs": [
          "An asset `class` was destroyed."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "class"
        ],
        "args_type_name": [
          "ClassId"
        ]
      },
      {
        "lookup": "3303",
        "name": "Issued",
        "docs": [
          "An asset `instance` was issued."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId"
        ],
        "args_name": [
          "class",
          "instance",
          "owner"
        ],
        "args_type_name": [
          "ClassId",
          "InstanceId",
          "AccountId"
        ]
      },
      {
        "lookup": "3304",
        "name": "Transferred",
        "docs": [
          "An asset `instance` was transferred."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "class",
          "instance",
          "from",
          "to"
        ],
        "args_type_name": [
          "ClassId",
          "InstanceId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3305",
        "name": "Burned",
        "docs": [
          "An asset `instance` was destroyed."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId"
        ],
        "args_name": [
          "class",
          "instance",
          "owner"
        ],
        "args_type_name": [
          "ClassId",
          "InstanceId",
          "AccountId"
        ]
      },
      {
        "lookup": "3306",
        "name": "Frozen",
        "docs": [
          "Some asset `instance` was frozen."
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "class",
          "instance"
        ],
        "args_type_name": [
          "ClassId",
          "InstanceId"
        ]
      },
      {
        "lookup": "3307",
        "name": "Thawed",
        "docs": [
          "Some asset `instance` was thawed."
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "class",
          "instance"
        ],
        "args_type_name": [
          "ClassId",
          "InstanceId"
        ]
      },
      {
        "lookup": "3308",
        "name": "ClassFrozen",
        "docs": [
          "Some asset `class` was frozen."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "class"
        ],
        "args_type_name": [
          "ClassId"
        ]
      },
      {
        "lookup": "3309",
        "name": "ClassThawed",
        "docs": [
          "Some asset `class` was thawed."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "class"
        ],
        "args_type_name": [
          "ClassId"
        ]
      },
      {
        "lookup": "330a",
        "name": "OwnerChanged",
        "docs": [
          "The owner changed."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "class",
          "new_owner"
        ],
        "args_type_name": [
          "ClassId",
          "AccountId"
        ]
      },
      {
        "lookup": "330b",
        "name": "TeamChanged",
        "docs": [
          "The management team changed."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "class",
          "issuer",
          "admin",
          "freezer"
        ],
        "args_type_name": [
          "ClassId",
          "AccountId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "330c",
        "name": "ApprovedTransfer",
        "docs": [
          "An `instance` of an asset `class` has been approved by the `owner` for transfer by a",
          "`delegate`."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "class",
          "instance",
          "owner",
          "delegate"
        ],
        "args_type_name": [
          "ClassId",
          "InstanceId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "330d",
        "name": "ApprovalCancelled",
        "docs": [
          "An approval for a `delegate` account to transfer the `instance` of an asset `class` was",
          "cancelled by its `owner`."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "class",
          "instance",
          "owner",
          "delegate"
        ],
        "args_type_name": [
          "ClassId",
          "InstanceId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "330e",
        "name": "AssetStatusChanged",
        "docs": [
          "An asset `class` has had its attributes changed by the `Force` origin."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "class"
        ],
        "args_type_name": [
          "ClassId"
        ]
      },
      {
        "lookup": "330f",
        "name": "ClassMetadataSet",
        "docs": [
          "New metadata has been set for an asset class."
        ],
        "args": [
          "U32",
          "Vec<U8>",
          "Bool"
        ],
        "args_name": [
          "class",
          "data",
          "is_frozen"
        ],
        "args_type_name": [
          "ClassId",
          "BoundedVec<u8, StringLimit>",
          "bool"
        ]
      },
      {
        "lookup": "3310",
        "name": "ClassMetadataCleared",
        "docs": [
          "Metadata has been cleared for an asset class."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "class"
        ],
        "args_type_name": [
          "ClassId"
        ]
      },
      {
        "lookup": "3311",
        "name": "MetadataSet",
        "docs": [
          "New metadata has been set for an asset instance."
        ],
        "args": [
          "U32",
          "U32",
          "Vec<U8>",
          "Bool"
        ],
        "args_name": [
          "class",
          "instance",
          "data",
          "is_frozen"
        ],
        "args_type_name": [
          "ClassId",
          "InstanceId",
          "BoundedVec<u8, StringLimit>",
          "bool"
        ]
      },
      {
        "lookup": "3312",
        "name": "MetadataCleared",
        "docs": [
          "Metadata has been cleared for an asset instance."
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "class",
          "instance"
        ],
        "args_type_name": [
          "ClassId",
          "InstanceId"
        ]
      },
      {
        "lookup": "3313",
        "name": "Redeposited",
        "docs": [
          "Metadata has been cleared for an asset instance."
        ],
        "args": [
          "U32",
          "Vec<U32>"
        ],
        "args_name": [
          "class",
          "successful_instances"
        ],
        "args_type_name": [
          "ClassId",
          "Vec<InstanceId>"
        ]
      },
      {
        "lookup": "3314",
        "name": "AttributeSet",
        "docs": [
          "New attribute metadata has been set for an asset class or instance."
        ],
        "args": [
          "U32",
          "option<U32>",
          "Vec<U8>",
          "Vec<U8>"
        ],
        "args_name": [
          "class",
          "maybe_instance",
          "key",
          "value"
        ],
        "args_type_name": [
          "ClassId",
          "Option<InstanceId>",
          "BoundedVec<u8, KeyLimit>",
          "BoundedVec<u8, ValueLimit>"
        ]
      },
      {
        "lookup": "3315",
        "name": "AttributeCleared",
        "docs": [
          "Attribute metadata has been cleared for an asset class or instance."
        ],
        "args": [
          "U32",
          "option<U32>",
          "Vec<U8>"
        ],
        "args_name": [
          "class",
          "maybe_instance",
          "key"
        ],
        "args_type_name": [
          "ClassId",
          "Option<InstanceId>",
          "BoundedVec<u8, KeyLimit>"
        ]
      }
    ],
    "events_value": {
      "type": 87
    },
    "constants": [
      {
        "name": "ClassDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00e40b54020000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved for an asset class."
        ]
      },
      {
        "name": "InstanceDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00e1f505000000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved for an asset instance."
        ]
      },
      {
        "name": "MetadataDepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "402ac8af040000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved when adding metadata to your asset."
        ]
      },
      {
        "name": "AttributeDepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00c817a8040000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved when adding an attribute to an asset."
        ]
      },
      {
        "name": "DepositPerByte",
        "type": "U128",
        "type_value": 6,
        "constants_value": "40420f00000000000000000000000000",
        "docs": [
          " The additional funds that must be reserved for the number of bytes store in metadata,",
          " either \"normal\" metadata or attribute metadata."
        ]
      },
      {
        "name": "StringLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "80000000",
        "docs": [
          " The maximum length of data stored on-chain."
        ]
      },
      {
        "name": "KeyLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "20000000",
        "docs": [
          " The maximum length of an attribute key."
        ]
      },
      {
        "name": "ValueLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "40000000",
        "docs": [
          " The maximum length of an attribute value."
        ]
      }
    ],
    "errors": [
      {
        "name": "NoPermission",
        "doc": [
          "The signing account has no permission to do the operation."
        ]
      },
      {
        "name": "UnknownClass",
        "doc": [
          "The given asset ID is unknown."
        ]
      },
      {
        "name": "AlreadyExists",
        "doc": [
          "The asset instance ID has already been used for an asset."
        ]
      },
      {
        "name": "WrongOwner",
        "doc": [
          "The owner turned out to be different to what was expected."
        ]
      },
      {
        "name": "BadWitness",
        "doc": [
          "Invalid witness data given."
        ]
      },
      {
        "name": "InUse",
        "doc": [
          "The asset ID is already taken."
        ]
      },
      {
        "name": "Frozen",
        "doc": [
          "The asset instance or class is frozen."
        ]
      },
      {
        "name": "WrongDelegate",
        "doc": [
          "The delegate turned out to be different to what was expected."
        ]
      },
      {
        "name": "NoDelegate",
        "doc": [
          "There is no delegate approved."
        ]
      },
      {
        "name": "Unapproved",
        "doc": [
          "No approval exists that would allow the transfer."
        ]
      }
    ],
    "errors_value": {
      "type": 291
    },
    "index": 51
  }
]